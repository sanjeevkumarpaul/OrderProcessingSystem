@typeparam TItem
@using System.Linq.Expressions
@using OrderProcessingSystem.UI.Shared.UIComponents
@using OrderProcessingSystem.Utilities.Extensions
@inject IJSRuntime JS

<div class="card p-3">
    <div class="d-flex justify-content-between align-items-center mb-2">
        <div class="d-flex align-items-center">
            <button class="btn btn-outline-secondary me-2" @onclick="ExportAll" disabled="@(Items==null || !Items.Any())">Export All</button>
            <button class="btn btn-outline-secondary me-3" @onclick="ExportFiltered" disabled="@(Items==null || !IsFilterActive())">Export Filtered</button>
            <button class="btn btn-outline-secondary me-3" @onclick="ClearAllFilters" disabled="@(!IsFilterActive())">Clear Filters</button>

            <label class="me-2">Page size:</label>
            <select class="form-select d-inline-block w-auto" @onchange="OnPageSizeChanged">
                @foreach (var s in PageSizes)
                {
                    <option selected="@(s==PageSize)" value="@s">@s</option>
                }
            </select>
        </div>
        <div>
            <small>Showing @((PagedItems?.Count ?? 0)) of @(FilteredTotalCount) cards</small>
        </div>
    </div>

    @* Filter Controls Row *@
    @if (Columns.Any(c => c.Filterable))
    {
        <div class="row mb-3">
            @foreach (var column in Columns.Where(c => c.Filterable))
            {
                <div class="col-12 col-md-6 col-lg-4 mb-2">
                    <div class="card border-light">
                        <div class="card-body p-2">
                            <label class="form-label small fw-bold">@column.Header</label>
                            @if (column.IsEnum && column.EnumValues != null)
                            {
                                <select class="form-select form-select-sm" @onchange="@(e => OnEnumFilterChanged(column.Field, e))">
                                    <option value="">All @column.Header</option>
                                    @foreach (var enumVal in column.EnumValues)
                                    {
                                        var isSelected = ColumnFilters.TryGetValue(column.Field, out var fs) && fs.EnumValue == enumVal;
                                        <option selected="@isSelected" value="@enumVal">@enumVal</option>
                                    }
                                </select>
                            }
                            else
                            {
                                <div class="input-group input-group-sm">
                                    <select class="form-select" style="max-width: 130px; flex-shrink: 0;" @onchange="@(e => OnTextFilterOpChanged(column.Field, e))">
                                        @foreach (var op in TextOps)
                                        {
                                            var isSelected = ColumnFilters.TryGetValue(column.Field, out var fs2) && fs2.TextOp == op;
                                            <option selected="@isSelected" value="@op">@op</option>
                                        }
                                    </select>
                                    <input type="text" class="form-control" style="flex: 1; min-width: 120px;" placeholder="Filter @column.Header..."
                                           value="@(ColumnFilters.TryGetValue(column.Field, out var fs3) ? fs3.TextValue : "")"
                                           @onchange="@(e => OnTextFilterChanged(column.Field, e))" />
                                </div>
                            }
                            @if (ColumnFilters.TryGetValue(column.Field, out var fs4) && (!string.IsNullOrWhiteSpace(fs4.TextValue) || !string.IsNullOrWhiteSpace(fs4.EnumValue)))
                            {
                                <button class="btn btn-sm btn-outline-danger mt-1" @onclick="() => ClearColumnFilter(column.Field)">Clear</button>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @* Sort Controls *@
    @if (Columns.Any(c => c.Sortable))
    {
        <div class="mb-3">
            <label class="me-2 fw-bold">Sort by:</label>
            <select class="form-select d-inline-block w-auto me-2" @onchange="OnSortColumnChanged">
                <option value="">No sorting</option>
                @foreach (var col in Columns.Where(c => c.Sortable))
                {
                    <option selected="@(SortColumn?.Field == col.Field)" value="@col.Field">@col.Header</option>
                }
            </select>
            @if (SortColumn != null)
            {
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleSortDirection">
                    @(SortAsc ? "↑ Ascending" : "↓ Descending")
                </button>
            }
        </div>
    }

    @* Cards Display *@
    <div class="row g-3">
        @if (PagedItems != null && PagedItems.Any())
        {
            @foreach (var item in PagedItems)
            {
                <div class="@CardColumnClass">
                    @CardTemplate!(item)
                </div>
            }
        }
        else if (Items != null && Items.Any())
        {
            <div class="col-12">
                <div class="alert alert-info">No items match the current filters.</div>
            </div>
        }
        else
        {
            <div class="col-12">
                <div class="alert alert-secondary">No data available.</div>
            </div>
        }
    </div>

    @* Pagination *@
    <nav aria-label="card-paging" class="mt-3">
        <ul class="pagination justify-content-center align-items-center">
            <li class="page-item @(CurrentPage==1?"disabled":"")">
                <button class="page-link" @onclick="() => GoToPage(1)">«</button>
            </li>
            <li class="page-item @(CurrentPage==1?"disabled":"")">
                <button class="page-link" @onclick="() => GoToPage(CurrentPage-1)">Previous</button>
            </li>

            <li class="page-item px-2">
                <select class="form-select form-select-sm" style="width:100px; display:inline-block" @onchange="OnPageSelect" value="@CurrentPage">
                    @for (int p = 1; p <= TotalPages; p++)
                    {
                        <option value="@p" selected="@(p==CurrentPage)">Page @p</option>
                    }
                </select>
            </li>

            <li class="page-item @(CurrentPage==TotalPages?"disabled":"")">
                <button class="page-link" @onclick="() => GoToPage(CurrentPage+1)">Next</button>
            </li>
            <li class="page-item @(CurrentPage==TotalPages?"disabled":"")">
                <button class="page-link" @onclick="() => GoToPage(TotalPages)">»</button>
            </li>
        </ul>
    </nav>
</div>

@code {
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public List<GridColumnVM> Columns { get; set; } = new List<GridColumnVM>();
    [Parameter] public int PageSize { get; set; } = 12;
    [Parameter] public string CardColumnClass { get; set; } = "col-12 col-sm-6 col-md-4 col-xl-3 mb-3";
    [Parameter] public RenderFragment<TItem> CardTemplate { get; set; } = default!;
    
    public int[] PageSizes { get; set; } = new[] { 8, 12, 16, 24 };

    List<TItem>? PagedItems;
    int CurrentPage = 1;
    int TotalPages = 1;
    int FilteredTotalCount = 0;

    // filtering state using shared service
    string[] TextOps = new[] { "Contains", "StartsWith", "EndsWith", "Equals" };

    // Local FilterState class to avoid generic syntax issues
    class FilterState
    {
        public string TextOp { get; set; } = "Contains";
        public string TextValue { get; set; } = string.Empty;
        public string EnumValue { get; set; } = string.Empty;
        public bool IsEnum { get; set; } = false;
    }

    // persistent per-column filters (field -> FilterState)  
    Dictionary<string, FilterState> ColumnFilters = new();

    // sorting
    GridColumnVM? SortColumn;
    bool SortAsc = true;

    protected override void OnParametersSet()
    {
        PageSize = PageSize;
        SetupPaging();
    }

    void SetupPaging()
    {
        CurrentPage = 1;
        var c = (Items?.Count() ?? 0);
        TotalPages = Math.Max(1, (int)Math.Ceiling((double)c / PageSize));
        ApplyPage();
    }

    void ApplyPage()
    {
        if (Items == null) { PagedItems = new List<TItem>(); return; }
        var list = ApplyFilterList(Items.ToList());
        FilteredTotalCount = list.Count;
        if (SortColumn != null) list = ApplySort(list, SortColumn, SortAsc);
        TotalPages = Math.Max(1, (int)Math.Ceiling((double)list.Count / PageSize));
        if (CurrentPage < 1) CurrentPage = 1;
        if (CurrentPage > TotalPages) CurrentPage = TotalPages;
        PagedItems = list.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    List<TItem> ApplyFilterList(List<TItem> input)
    {
        if (input == null) return new List<TItem>();
        IEnumerable<TItem> q = input;
        // Apply all column filters present in ColumnFilters (persisted per-column state)
        foreach (var kv in ColumnFilters)
        {
            var field = kv.Key;
            var fs = kv.Value;
            if (fs.IsEnum)
            {
                if (!string.IsNullOrWhiteSpace(fs.EnumValue))
                {
                    q = q.Where(i => string.Equals(GetValue(i, field)?.ToString() ?? string.Empty, fs.EnumValue, StringComparison.OrdinalIgnoreCase));
                }
            }
            else
            {
                if (!string.IsNullOrWhiteSpace(fs.TextValue))
                {
                    var t = fs.TextValue.Trim();
                    q = q.Where(i => MatchText(GetValue(i, field)?.ToString() ?? string.Empty, t, fs.TextOp));
                }
            }
        }
        return q.ToList();
    }    List<TItem> ApplySort(List<TItem> input, GridColumnVM col, bool asc)
    {
        var sampleItem = input.FirstOrDefault(i => GetValue(i, col.Field) != null);
        var sampleVal = sampleItem != null ? GetValue(sampleItem, col.Field) : null;

        if (sampleVal != null)
        {
            var t = sampleVal.GetType();
            var typeCode = System.Type.GetTypeCode(t);

            bool isNumeric = typeCode == TypeCode.Byte || typeCode == TypeCode.SByte || typeCode == TypeCode.Int16 ||
                             typeCode == TypeCode.UInt16 || typeCode == TypeCode.Int32 || typeCode == TypeCode.UInt32 ||
                             typeCode == TypeCode.Int64 || typeCode == TypeCode.UInt64 || typeCode == TypeCode.Single ||
                             typeCode == TypeCode.Double || typeCode == TypeCode.Decimal;

            if (isNumeric)
            {
                if (asc)
                    return input.OrderBy(i =>
                    {
                        var v = GetValue(i, col.Field);
                        try { return Convert.ToDecimal(v ?? 0); }
                        catch { return decimal.MinValue; }
                    }).ToList();
                else
                    return input.OrderByDescending(i =>
                    {
                        var v = GetValue(i, col.Field);
                        try { return Convert.ToDecimal(v ?? 0); }
                        catch { return decimal.MinValue; }
                    }).ToList();
            }

            if (typeCode == TypeCode.DateTime)
            {
                if (asc)
                    return input.OrderBy(i =>
                    {
                        var v = GetValue(i, col.Field);
                        return v is DateTime dt ? dt : DateTime.MinValue;
                    }).ToList();
                else
                    return input.OrderByDescending(i =>
                    {
                        var v = GetValue(i, col.Field);
                        return v is DateTime dt ? dt : DateTime.MinValue;
                    }).ToList();
            }
        }

        return asc
            ? input.OrderBy(i => (GetValue(i, col.Field)?.ToString() ?? string.Empty)).ToList()
            : input.OrderByDescending(i => (GetValue(i, col.Field)?.ToString() ?? string.Empty)).ToList();
    }

    object? GetValue(TItem? item, string field)
    {
        if (item == null) return null;
        var parts = (field ?? string.Empty).Split('.', StringSplitOptions.RemoveEmptyEntries);
        object? cur = item as object;
        foreach (var p in parts)
        {
            if (cur == null) return null;
            var prop = cur.GetType().GetProperty(p);
            if (prop == null) return null;
            cur = prop.GetValue(cur);
        }
        return cur;
    }

    static bool MatchText(string value, string term, string op)
    {
        if (value == null) return false;
        return op switch
        {
            "Contains" => value.IndexOf(term, StringComparison.OrdinalIgnoreCase) >= 0,
            "StartsWith" => value.StartsWith(term, StringComparison.OrdinalIgnoreCase),
            "EndsWith" => value.EndsWith(term, StringComparison.OrdinalIgnoreCase),
            "Equals" => string.Equals(value, term, StringComparison.OrdinalIgnoreCase),
            _ => value.IndexOf(term, StringComparison.OrdinalIgnoreCase) >= 0
        };
    }    void OnTextFilterChanged(string field, ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? string.Empty;
        if (!ColumnFilters.ContainsKey(field))
        {
            ColumnFilters[field] = new FilterState { IsEnum = false };
        }
        ColumnFilters[field].TextValue = value;
        CurrentPage = 1;
        ApplyPage();
    }

    void OnTextFilterOpChanged(string field, ChangeEventArgs e)
    {
        var op = e.Value?.ToString() ?? "Contains";
        if (!ColumnFilters.ContainsKey(field))
        {
            ColumnFilters[field] = new FilterState { IsEnum = false };
        }
        ColumnFilters[field].TextOp = op;
        CurrentPage = 1;
        ApplyPage();
    }

    void OnEnumFilterChanged(string field, ChangeEventArgs e)
    {
        var value = e.Value?.ToString() ?? string.Empty;
        if (!ColumnFilters.ContainsKey(field))
        {
            ColumnFilters[field] = new FilterState { IsEnum = true };
        }
        ColumnFilters[field].EnumValue = value;
        CurrentPage = 1;
        ApplyPage();
    }

    void ClearColumnFilter(string field)
    {
        ColumnFilters.Remove(field);
        ApplyPage();
    }

    void ClearAllFilters()
    {
        ColumnFilters.Clear();
        CurrentPage = 1;
        ApplyPage();
    }

    void OnSortColumnChanged(ChangeEventArgs e)
    {
        var field = e.Value?.ToString();
        if (string.IsNullOrEmpty(field))
        {
            SortColumn = null;
        }
        else
        {
            SortColumn = Columns.FirstOrDefault(c => c.Field == field);
        }
        SortAsc = true;
        ApplyPage();
    }

    void ToggleSortDirection()
    {
        SortAsc = !SortAsc;
        ApplyPage();
    }

    void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out var s)) { PageSize = s; SetupPaging(); }
    }

    void GoToPage(int p)
    {
        CurrentPage = Math.Clamp(p, 1, TotalPages);
        ApplyPage();
    }

    void OnPageSelect(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out var p))
        {
            GoToPage(p);
        }
    }

    bool IsFilterActive()
    {
        return ColumnFilters.Any(filter => !string.IsNullOrWhiteSpace(filter.Value.TextValue) || !string.IsNullOrWhiteSpace(filter.Value.EnumValue));
    }

    async Task ExportAll()
    {
        if (Items == null) return;
        var csv = BuildCsv(Items.ToList());
        var filename = $"cards_all_{DateTime.UtcNow:yyyyMMddHHmmss}.csv";
        await JS.InvokeVoidAsync("blazorDownload", filename, csv);
    }

    async Task ExportFiltered()
    {
        if (Items == null) return;
        var list = ApplyFilterList(Items.ToList());
        var csv = BuildCsv(list);
        var filename = $"cards_filtered_{DateTime.UtcNow:yyyyMMddHHmmss}.csv";
        await JS.InvokeVoidAsync("blazorDownload", filename, csv);
    }

    string BuildCsv(List<TItem> list)
    {
        var sb = new System.Text.StringBuilder();
        sb.AppendLine(string.Join(',', Columns.Select(c => c.Header)));
        foreach (var it in list)
        {
            var row = Columns.Select(c => EscapeCsv((GetValue(it, c.Field)?.ToString() ?? string.Empty))).ToArray();
            sb.AppendLine(string.Join(',', row));
        }
        return sb.ToString();
    }

    static string EscapeCsv(string input)
    {
        if (input == null) return string.Empty;
        if (input.Contains(',') || input.Contains('"') || input.Contains('\n')) return '"' + input.Replace("\"", "\"\"") + '"';
        return input;
    }
}
