@using OrderProcessingSystem.Infrastructure.Services;
@using Microsoft.JSInterop

<nav class="navbar navbar-expand-lg topnav fixed-top" role="navigation">
  <div class="container-fluid">
    <a class="navbar-brand" href="/">ORDER RECONCILATION SYSTEM</a>

    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#mainNav" aria-controls="mainNav" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="mainNav">
      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
        <!-- Orders - Visible to all roles -->
        @if (ShouldShowMenuItem("Orders"))
        {
          <li class="nav-item"><a class="nav-link" href="/orders">Orders</a></li>
        }
        
        <!-- Suppliers - Visible to all roles -->
        @if (ShouldShowMenuItem("Suppliers"))
        {
          <li class="nav-item"><a class="nav-link" href="/suppliers">Suppliers</a></li>
        }
        
        <!-- Customers - Visible to all roles -->
        @if (ShouldShowMenuItem("Customers"))
        {
          <li class="nav-item"><a class="nav-link" href="/customers">Customers</a></li>
        }

        <!-- User Activity - Visible only to ADMIN -->
        @if (ShouldShowMenuItem("UserActivity"))
        {
          <li class="nav-item"><a class="nav-link" href="/user-activity">User Activity</a></li>
        }
       
        <!-- Processing - Hidden for ADMIN role -->
        @if (ShouldShowMenuItem("Processing"))
        {
          <li class="nav-item"><a class="nav-link" href="/process-order">Process Order</a></li>
        }
        
        @if (isAuthenticated)
        {
          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle text-success fw-bold" href="#" id="authDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
              <i class="@GetRoleIcon()"></i> @GetRoleDisplayText()
            </a>
            <ul class="dropdown-menu" aria-labelledby="authDropdown">
              @if (userRole.Equals("Admin", StringComparison.OrdinalIgnoreCase))
              {
                <li><a class="dropdown-item" href="/coming-soon">
                  <i class="fas fa-crown text-danger"></i> Admin Panel
                </a></li>
                <li><a class="dropdown-item" href="/coming-soon">
                  <i class="fas fa-cogs"></i> System Settings
                </a></li>
                <li><a class="dropdown-item" href="/coming-soon">
                  <i class="fas fa-users"></i> User Management
                </a></li>                
              }
              @if (userRole.Equals("Manager", StringComparison.OrdinalIgnoreCase))
              {                
                <li><a class="dropdown-item" href="/reports">
                  <i class="fas fa-file-chart text-info"></i> Premium Reports
                </a></li>                                
              }
              <li><hr class="dropdown-divider"></li>
              <li><a class="dropdown-item" href="/coming-soon">
                <i class="fas fa-user-circle"></i> My Profile
              </a></li>
              <li><a class="dropdown-item" href="/coming-soon">
                <i class="fas fa-bell"></i> Notifications
              </a></li>
            </ul>
          </li>
        }
      </ul>
      
      <!-- User Info and Logout -->
      <ul class="navbar-nav">
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="fas fa-user"></i> @userName
          </a>
          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
            <li><span class="dropdown-item-text">Role: @userRole</span></li>
            <li><hr class="dropdown-divider"></li>
            <li><button class="dropdown-item" @onclick="Logout">
              <i class="fas fa-sign-out-alt"></i> Logout
            </button></li>
          </ul>
        </li>
      </ul>
    </div>
  </div>
</nav>

@code {
    [Inject] private IAuthStateService? AuthState { get; set; }
    [Inject] private NavigationManager? Navigation { get; set; }
    [Inject] private IJSRuntime? JSRuntime { get; set; }

    private string userName = "User";
    private string userRole = "Guest";
    private bool isAuthenticated = false;

    private async Task Logout()
    {
        if (AuthState != null && Navigation != null)
        {
            await AuthState.LogoutAsync();
            Navigation.NavigateTo("/", true);
        }
    }

    private string GetRoleIcon()
    {
        return userRole.ToLower() switch
        {
            "admin" => "fas fa-crown",
            "manager" => "fas fa-user-tie",
            "user" => "fas fa-user",
            _ => "fas fa-star"
        };
    }

    private string GetRoleDisplayText()
    {
        return userRole.ToLower() switch
        {
            "admin" => "Admin Features",
            "manager" => "Manager Features", 
            "user" => "User Features",
            _ => "Features"
        };
    }

  /// <summary>
  /// Determines if a menu item should be visible based on user profile (role)
  /// Loads profile-menu mapping from appsettings.json (MenuProfiles section)
  /// </summary>
  [Inject] private IConfiguration? Configuration { get; set; }

  private Dictionary<string, HashSet<string>> ProfileMenuMap = new();

  protected override async Task OnInitializedAsync()
  {
    if (AuthState != null)
    {
      userName = await AuthState.GetUserNameAsync() ?? "User";
      userRole = await AuthState.GetUserRoleAsync() ?? "Guest";
      isAuthenticated = await AuthState.IsAuthenticatedAsync();
    }

    // Load menu profiles from configuration
    if (Configuration != null)
    {
      var section = Configuration.GetSection("MenuProfiles");
      foreach (var profile in section.GetChildren())
      {
        var menus = profile.Get<string[]>() ?? Array.Empty<string>();
        ProfileMenuMap[profile.Key.ToLower()] = new HashSet<string>(menus.Select(m => m.ToLower()));
      }
    }
  }

  private bool ShouldShowMenuItem(string menuItem)
  {
    if (!isAuthenticated) return false;
    var role = userRole.ToLower();
    return ProfileMenuMap.TryGetValue(role, out var allowedMenus) && allowedMenus.Contains(menuItem.ToLower());
  }
}
