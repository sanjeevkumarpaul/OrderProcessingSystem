@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="login-container">
    <div class="login-card">
        <div class="oauth-section">
            <h2 class="login-title">Welcome to Order Processing System</h2>
            <p class="login-subtitle">Please sign in to continue</p>
            
            <div class="oauth-buttons">
                <button class="oauth-btn microsoft-btn" @onclick="LoginWithMicrosoft" disabled="@isLoading">
                    @if (isLoading && currentProvider == "Microsoft")
                    {
                        <div class="spinner"></div>
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <i class="fab fa-microsoft"></i>
                        <span>Login Via Microsoft</span>
                    }
                </button>
                
                <button class="oauth-btn google-btn" @onclick="LoginWithGoogle" disabled="@isLoading">
                    @if (isLoading && currentProvider == "Google")
                    {
                        <div class="spinner"></div>
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <i class="fab fa-google"></i>
                        <span>Login Via Google</span>
                    }
                </button>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>@errorMessage</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private string currentProvider = string.Empty;
    private string errorMessage = string.Empty;

    private async Task LoginWithMicrosoft()
    {
        try
        {
            isLoading = true;
            currentProvider = "Microsoft";
            errorMessage = string.Empty;
            StateHasChanged();

            Console.WriteLine("LoginWithMicrosoft clicked - navigating to role selection");
            
            // Add a small delay to show loading state
            await Task.Delay(500);
            
            // Force navigation to Role Selection page
            Navigation.NavigateTo("/role-selection?provider=Microsoft", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoginWithMicrosoft: {ex.Message}");
            errorMessage = $"Microsoft login failed: {ex.Message}";
            isLoading = false;
            currentProvider = string.Empty;
            StateHasChanged();
        }
    }

    private async Task LoginWithGoogle()
    {
        try
        {
            isLoading = true;
            currentProvider = "Google";
            errorMessage = string.Empty;
            StateHasChanged();

            Console.WriteLine("LoginWithGoogle clicked - navigating to role selection");
            
            // Add a small delay to show loading state
            await Task.Delay(500);
            
            // Force navigation to Role Selection page
            Navigation.NavigateTo("/role-selection?provider=Google", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoginWithGoogle: {ex.Message}");
            errorMessage = $"Google login failed: {ex.Message}";
            isLoading = false;
            currentProvider = string.Empty;
            StateHasChanged();
        }
    }

    private async Task SimulateSuccessfulLogin(string provider, string displayName, string email, string token)
    {
        // Store authentication details
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authProvider", provider);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", token);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userName", displayName);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userEmail", email);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userRole", "User"); // Default role
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "loginTime", DateTime.UtcNow.ToString("O"));
    }
}

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    .login-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        padding: 40px;
        max-width: 500px;
        width: 100%;
        text-align: center;
    }

    .login-title {
        color: #333;
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 10px;
    }

    .login-subtitle {
        color: #666;
        font-size: 1.1rem;
        margin-bottom: 30px;
    }

    .oauth-buttons {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-bottom: 20px;
    }

    .oauth-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
        padding: 15px 20px;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .oauth-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .microsoft-btn {
        background: #0078d4;
        color: white;
    }

    .microsoft-btn:hover:not(:disabled) {
        background: #106ebe;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,120,212,0.4);
    }

    .google-btn {
        background: #db4437;
        color: white;
    }

    .google-btn:hover:not(:disabled) {
        background: #c23321;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(219,68,55,0.4);
    }

    .spinner {
        width: 20px;
        height: 20px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .error-message {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 12px 16px;
        border-radius: 8px;
        margin-top: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 0.9rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @@media (max-width: 600px) {
        .login-card {
            padding: 30px 20px;
        }
    }
</style>
