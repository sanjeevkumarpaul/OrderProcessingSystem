@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="login-container">
    <div class="login-card">
        <div class="oauth-section">
            <h2 class="login-title">Welcome to Order Processing System</h2>
            <p class="login-subtitle">Please sign in to continue</p>
            
            <div class="oauth-buttons">
                <button class="oauth-btn microsoft-btn" @onclick="LoginWithMicrosoft" disabled="@isLoading">
                    @if (isLoading && currentProvider == "Microsoft")
                    {
                        <div class="spinner"></div>
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <i class="fab fa-microsoft"></i>
                        <span>Login Via Microsoft</span>
                    }
                </button>
                
                <button class="oauth-btn google-btn" @onclick="LoginWithGoogle" disabled="@isLoading">
                    @if (isLoading && currentProvider == "Google")
                    {
                        <div class="spinner"></div>
                        <span>Signing in...</span>
                    }
                    else
                    {
                        <i class="fab fa-google"></i>
                        <span>Login Via Google</span>
                    }
                </button>
            </div>
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="error-message">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>@errorMessage</span>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private string? errorMessage = null;
    private string currentProvider = string.Empty;

    private async Task LoginWithMicrosoft()
    {
        try
        {
            isLoading = true;
            currentProvider = "Microsoft";
            errorMessage = string.Empty;
            StateHasChanged();

            Console.WriteLine("LoginWithMicrosoft clicked - navigating to role selection");
            
            // Add a small delay to show loading state
            await Task.Delay(500);
            
            // Force navigation to Role Selection page
            Navigation.NavigateTo("/role-selection?provider=Microsoft", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoginWithMicrosoft: {ex.Message}");
            errorMessage = $"Microsoft login failed: {ex.Message}";
            isLoading = false;
            currentProvider = string.Empty;
            StateHasChanged();
        }
    }

    private async Task LoginWithGoogle()
    {
        try
        {
            isLoading = true;
            currentProvider = "Google";
            errorMessage = string.Empty;
            StateHasChanged();

            Console.WriteLine("LoginWithGoogle clicked - navigating to role selection");
            
            // Add a small delay to show loading state
            await Task.Delay(500);
            
            // Force navigation to Role Selection page
            Navigation.NavigateTo("/role-selection?provider=Google", forceLoad: true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoginWithGoogle: {ex.Message}");
            errorMessage = $"Google login failed: {ex.Message}";
            isLoading = false;
            currentProvider = string.Empty;
            StateHasChanged();
        }
    }

    private async Task SimulateSuccessfulLogin(string provider, string displayName, string email, string token)
    {
        // Store authentication details
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authProvider", provider);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", token);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userName", displayName);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userEmail", email);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userRole", "User"); // Default role
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "loginTime", DateTime.UtcNow.ToString("O"));
    }
}
