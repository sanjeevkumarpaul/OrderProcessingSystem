@page "/reports"
@inject OrderProcessingSystem.Contracts.Interfaces.IApiDataService ApiDataService
@inject OrderProcessingSystem.Contracts.Interfaces.IViewModelDataProvider ViewModelDataProvider
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<link rel="stylesheet" href="~/css/reports.css" />

<h1 class="page-title">Reports</h1>

<div class="report-layout">
  <aside class="report-params">
    <h5>Parameters</h5>
    <div class="mb-3">
      <!-- Date range removed per request -->
    </div>
    <div class="mb-3">
      <label class="form-label">Customer</label>
      <select class="form-select" @bind="selectedCustomerId">
        <option value="">(All)</option>
        @foreach(var c in customers ?? Enumerable.Empty<CustomerVM>())
        {
          <option value="@c.CustomerId">@c.Name</option>
        }
      </select>
    </div>
    <div class="d-grid">
      <button class="btn btn-primary" @onclick="RunReport" disabled="@isRunning">
        @if (isRunning) { <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> }
        <span class="ms-1">Run</span>
      </button>
      <button class="btn btn-outline-secondary mt-2" @onclick="ResetParameters" disabled="@isRunning">Reset</button>
    </div>
  </aside>

  <section class="report-canvas-wrap">
    <div class="report-toolbar">
      <div>Preview: <strong>@(reportPagesCount) page(s)</strong></div>
      <div class="ms-3">
        @if (!string.IsNullOrEmpty(lastError))
        {
          <span class="text-danger">Error: @lastError</span>
        }
        else if (lastRunAt != null)
        {
          <small class="text-muted">Last run: @lastRunAt?.ToString("yyyy-MM-dd HH:mm:ss")</small>
        }
      </div>
      <div class="ms-auto">
        <button class="btn btn-sm btn-outline-primary" @onclick="PrintFromComponent">Print Report</button>
      </div>
    </div>

    <div class="report-pages">
      @if (!hasLoaded)
      {
        <p><em>Loading report...</em></p>
      }
      else
      {
        <!-- Single page preview below; additional pages would be looped here -->
        <div @ref="reportContainer">
          <div class="report-page">
          <div class="report-header">
            <h4>Sales Report</h4>
            <!-- date range removed -->
          </div>

          <div class="report-body">
            <h6>Sales by Customer</h6>
            <table class="table table-sm report-table">
              <thead>
                <tr><th>Customer</th><th class="text-end">Orders</th><th class="text-end">Total Sales</th></tr>
              </thead>
              <tbody>
                @if (salesReport == null || salesReport.Count == 0)
                {
                  <tr><td colspan="3"><em>No data</em></td></tr>
                }
                else
                {
                  @foreach(var r in salesReport)
                  {
                    <tr>
                      <td>@r.CustomerName</td>
                      <td class="text-end">@r.OrderCount</td>
              <td class="text-end">@r.TotalSales.ToTwoDecimals(true)</td>
                    </tr>
                  }
                }
                </tbody>
              <tfoot>
                <tr class="fw-bold">
                  <td>Total</td>
                  <td class="text-end">@SalesTotalOrders</td>
            <td class="text-end">@SalesTotalAmount.ToTwoDecimals(true)</td>
                </tr>
              </tfoot>
            </table>

            <h6 class="mt-4">Orders Preview</h6>
            <table class="table table-sm report-table">
              <thead>
                <tr><th>Order #</th><th>Customer</th><th>Supplier</th><th class="text-end">Total</th></tr>
              </thead>
              <tbody>
                @if (ordersPreview == null || ordersPreview.Count == 0)
                {
                  <tr><td colspan="4"><em>No orders</em></td></tr>
                }
                else
                {
                  foreach(var o in ordersPreview)
                  {
                    <tr>
                      <td>@o.OrderId</td>
                      <td>@o.Customer?.Name</td>
                      <td>@o.Supplier?.Name</td>
              <td class="text-end">@o.Total.ToTwoDecimals(true)</td>
                    </tr>
                  }
                }
              </tbody>
              <tfoot>
                <tr class="fw-bold">
                  <td colspan="3" class="text-end">Total:</td>
            <td class="text-end">@OrdersTotalAmount.ToTwoDecimals(true)</td>
                </tr>
              </tfoot>
            </table>
          </div>

          <div class="report-footer">
            Generated @DateTime.Now.ToString("yyyy-MM-dd HH:mm")
          </div>
          </div>
        </div>
      }
    </div>
  </section>
</div>

@code {
  bool hasLoaded = false;
  int reportPagesCount = 1;
  string? selectedCustomerId;

  List<SalesByCustomerVM>? salesReport = null;
  List<OrderVM>? ordersPreview = null;
  List<CustomerVM>? customers = null;

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender) return;
    try
    {
      // Get customers for dropdown using ViewModelDataProvider
      customers = await ViewModelDataProvider.GetMappedDataAsync<OrderProcessingSystem.Contracts.Dto.CustomerDto, CustomerVM>(
          async () => await ApiDataService.GetCustomersAsync()
      ) ?? new List<CustomerVM>();
      
      await RunReport();
      hasLoaded = true;
      StateHasChanged();
    }
    catch(Exception ex)
    {
      Console.Error.WriteLine($"Reports fetch failed: {ex}");
    }
  }

  bool isRunning = false;
  string? lastError = null;
  DateTime? lastRunAt = null;
  async Task RunReport()
  {
    if (isRunning) return;
    isRunning = true;
    lastError = null;
    try
    {
      // Parse customer ID if provided
      int? customerId = null;
      if (!string.IsNullOrWhiteSpace(selectedCustomerId) && int.TryParse(selectedCustomerId, out var parsedCustomerId))
      {
        customerId = parsedCustomerId;
      }

      // Call the sales report API with proper authentication
      var salesDtos = await ApiDataService.GetSalesByCustomerAsync(customerId);
      
      // Get orders for preview
      var orderDtos = await ApiDataService.GetOrdersAsync();

      // Map DTOs to ViewModels using AutoMapper through ViewModelDataProvider
      salesReport = await ViewModelDataProvider.GetMappedDataAsync<OrderProcessingSystem.Contracts.Dto.SalesByCustomerDto, SalesByCustomerVM>(
          () => Task.FromResult<List<OrderProcessingSystem.Contracts.Dto.SalesByCustomerDto>?>(salesDtos)
      ) ?? new List<SalesByCustomerVM>();
      
      ordersPreview = await ViewModelDataProvider.GetMappedDataAsync<OrderProcessingSystem.Contracts.Dto.OrderDto, OrderVM>(
          () => Task.FromResult<List<OrderProcessingSystem.Contracts.Dto.OrderDto>?>(orderDtos)
      ) ?? new List<OrderVM>();
      
      reportPagesCount = 1; // stub â€” paging/layout calculation would go here
      lastRunAt = DateTime.Now;
      // ensure UI updates on the UI thread
      await InvokeAsync(StateHasChanged);
    }
    catch (Exception ex)
    {
      lastError = ex.Message;
      Console.Error.WriteLine($"RunReport failed: {ex}");
      salesReport = salesReport ?? new List<SalesByCustomerVM>();
      ordersPreview = ordersPreview ?? new List<OrderVM>();
      await InvokeAsync(StateHasChanged);
    }
    finally
    {
      isRunning = false;
      await InvokeAsync(StateHasChanged);
    }
  }

  async Task ResetParameters()
  {
    selectedCustomerId = null;
    // re-run the report after resetting parameters
    await RunReport();
    await InvokeAsync(StateHasChanged);
  }

  // JS runtime for potential future use
  [Inject] IJSRuntime? JS { get; set; }
  // reference to the report container element
  private ElementReference reportContainer;

  async Task PrintFromComponent()
  {
    // Print functionality temporarily disabled - can be re-implemented later
    if (JS != null)
    {
      await JS.InvokeVoidAsync("window.print");
    }
  }

  // computed totals for the tables
  int SalesTotalOrders => salesReport?.Sum(s => s.OrderCount) ?? 0;
  decimal SalesTotalAmount {
    get
    {
      var sum = salesReport?.Sum(s => (double?)s.TotalSales) ?? 0.0;
      return Convert.ToDecimal(sum);
    }
  }

  decimal OrdersTotalAmount {
    get
    {
      var sum = ordersPreview?.Sum(o => (double?)o.Total) ?? 0.0;
      return Convert.ToDecimal(sum);
    }
  }
}
