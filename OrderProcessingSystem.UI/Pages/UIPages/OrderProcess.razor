@page "/orderprocess"
@page "/process-order"

@inject IApiDataService DataService
@inject IOrderFileService OrderFileService
@inject IJSRuntime JSRuntime
@inject IGridColumnService GridColumnService
@using OrderProcessingSystem.Contracts.Interfaces
@using OrderProcessingSystem.Contracts.Dto

<PageTitle>Process Order - OrderProcessingSystem.UI</PageTitle>

<div class="order-process-page">
    <div class="text-center mb-5">
        <h1>Order Processing Initialization - Simulation Process</h1>
    </div>
    
    <!-- Order Capture Form -->
    <div class="order-capture-section">
        <div class="capture-card">
            <div class="card-header">
                <h3 class="section-title">Order Capture Application</h3>                
            </div>
                
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="loading-state">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <span class="ms-2">initializing dream sequence...</span>
                        </div>
                    }
                    else
                    {
                        <div class="flowing-text">
                            <p class="narrative-text">
                                Message for delivery related to Order Capture Application, where 
                                <span class="inline-control-wrapper">
                                    <div class="custom-dropdown tag-style-select @(isCustomerDropdownOpen ? "open" : "")" @onclick="ToggleCustomerDropdown" @onclick:stopPropagation="true">
                                        <div class="dropdown-selected">
                                            @if (selectedCustomerId == 0)
                                            {
                                                <span>Customer</span>
                                            }
                                            else
                                            {
                                                <span>@customers?.FirstOrDefault(c => c.CustomerId == selectedCustomerId)?.Name</span>
                                            }
                                        </div>
                                        @if (isCustomerDropdownOpen)
                                        {
                                            <div class="dropdown-options">
                                                <div class="dropdown-option @(selectedCustomerId == 0 ? "selected" : "")" @onclick="@(() => SelectCustomer(0))" @onclick:stopPropagation="true">
                                                    Customer
                                                </div>
                                                @if (customers != null)
                                                {
                                                    @foreach (var customer in customers)
                                                    {
                                                        <div class="dropdown-option @(selectedCustomerId == customer.CustomerId ? "selected" : "")" @onclick="@(() => SelectCustomer(customer.CustomerId))" @onclick:stopPropagation="true">
                                                            @customer.Name
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                </span>
                                has a Order no.of 
                                <span class="inline-control-wrapper">
                                    <div class="inline-quantity-group">
                                        <input type="number" 
                                               class="inline-input" 
                                               @bind="orderQuantity" 
                                               @onkeydown="HandleQuantityKeyDown"
                                               min="1" 
                                               max="5000" 
                                               placeholder="qty">
                                        <div class="micro-controls">
                                            <button type="button" class="micro-btn" @onclick="IncrementQuantity">â†‘</button>
                                            <button type="button" class="micro-btn" @onclick="DecrementQuantity">â†“</button>
                                        </div>
                                    </div>
                                </span>
                                items from the supplier 
                                <span class="inline-control-wrapper">
                                    <div class="custom-dropdown tag-style-select @(isSupplierDropdownOpen ? "open" : "")" @onclick="ToggleSupplierDropdown" @onclick:stopPropagation="true">
                                        <div class="dropdown-selected">
                                            @if (selectedSupplierId == 0)
                                            {
                                                <span>Supplier</span>
                                            }
                                            else
                                            {
                                                <span>@suppliers?.FirstOrDefault(s => s.SupplierId == selectedSupplierId)?.Name</span>
                                            }
                                        </div>
                                        @if (isSupplierDropdownOpen)
                                        {
                                            <div class="dropdown-options">
                                                <div class="dropdown-option @(selectedSupplierId == 0 ? "selected" : "")" @onclick="@(() => SelectSupplier(0))" @onclick:stopPropagation="true">
                                                    Supplier
                                                </div>
                                                @if (suppliers != null)
                                                {
                                                    @foreach (var supplier in suppliers)
                                                    {
                                                        <div class="dropdown-option @(selectedSupplierId == supplier.SupplierId ? "selected" : "")" @onclick="@(() => SelectSupplier(supplier.SupplierId))" @onclick:stopPropagation="true">
                                                            @supplier.Name
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                </span>
                                .
                            </p>
                        </div>
                        
                        <!-- Action Area -->
                        <div class="action-flow mt-4">
                            <div class="process-narrative">
                                <span class="flow-text">initiate the dream sequence</span>
                                <button class="flow-btn" 
                                        @onclick="InitializeOrder" 
                                        disabled="@(!CanProcessOrder)">
                                    Initialize Order
                                </button>
                                <span class="flow-text">or</span>
                                <button class="flow-btn" @onclick="CancelOrder" disabled="@(!CanProcessOrder)">
                                    Cancel Order
                                </button>
                            </div>
                        </div>                       
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- TransExceptions Grid Section -->
    <div class="trans-exceptions-section">
        <div class="capture-card">
            <div class="card-header">
                <h3 class="section-title">Unprocessed Transaction Exceptions</h3>
                <small class="text-muted">Transactions that failed processing and need attention</small>
            </div>
            <div class="card-body">
                @if (transExceptionsLoading)
                {
                    <div class="loading-state">
                        <div class="spinner-border spinner-border-sm text-secondary" role="status">
                            <span class="visually-hidden">Loading exceptions...</span>
                        </div>
                        <span class="ms-2">Loading transaction exceptions...</span>
                    </div>
                }
                else if (transExceptions != null)
                {
                    <div class="mb-3">
                        <div class="d-flex justify-content-between align-items-center">
                            <div>
                                <strong>@transExceptions.Count</strong> exception records found
                            </div>
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-primary" @onclick="RefreshTransExceptions">
                                    ðŸ”„ Refresh
                                </button>
                                <select class="form-select form-select-sm" style="width: auto;" @bind="SelectedTransactionTypeFilter">
                                    <option value="">All Types</option>
                                    <option value="Order Creation">Order Creation</option>
                                    <option value="Order Cancellation">Order Cancellation</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <GenericGrid TItem="TransExceptionDto" 
                                 Items="filteredTransExceptions" 
                                 Columns="transExceptionColumns" 
                                 PageSize="8" />
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle me-2"></i>
                        No transaction exceptions found. System is running smoothly!
                    </div>
                }
            </div>
        </div>
</div>

@code {
    // Data properties
    private List<CustomerDto>? customers;
    private List<SupplierDto>? suppliers;
    private bool isLoading = true;
  
    // TransExceptions data properties
    private List<TransExceptionDto>? transExceptions;
    private List<TransExceptionDto>? filteredTransExceptions;
    private bool transExceptionsLoading = false;
    private List<GridColumnVM> transExceptionColumns = new();
    private string selectedTransactionTypeFilter = "";
    
    // Property to handle filter changes
    private string SelectedTransactionTypeFilter
    {
        get => selectedTransactionTypeFilter;
        set
        {
            selectedTransactionTypeFilter = value;
            ApplyTransactionTypeFilter();
            InvokeAsync(StateHasChanged);
        }
    }
    
    // Form properties
    private int selectedCustomerId = 0;
    private int selectedSupplierId = 0;
    private int orderQuantity = 1;
    
    // Custom dropdown states
    private bool isCustomerDropdownOpen = false;
    private bool isSupplierDropdownOpen = false;
    
    // Computed properties
    private bool CanProcessOrder => 
        selectedCustomerId > 0 && 
        selectedSupplierId > 0 && 
        orderQuantity >= 1 && 
        orderQuantity <= 5000;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadFormData();
        await LoadTransExceptionsData();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupDropdownHandlers", DotNetObjectReference.Create(this));
            
            // Debug logging after first render
            try
            {
                await JSRuntime.InvokeVoidAsync("console.log", "TransExceptions loaded:", transExceptions?.Count ?? 0);
                if (transExceptions?.Count > 0)
                {
                    await JSRuntime.InvokeVoidAsync("console.log", "First record:", transExceptions[0]);
                }
                await JSRuntime.InvokeVoidAsync("console.log", "Filtered TransExceptions:", filteredTransExceptions?.Count ?? 0);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("console.error", "Debug logging error:", ex.Message);
            }
        }
    }
    
    private async Task LoadFormData()
    {
        isLoading = true;
                
        try
        {
            // Use basic methods for dropdown population - no need for complex calculations
            var customersTask = DataService.GetCustomersAsync();
            var suppliersTask = DataService.GetSuppliersAsync();
            
            await Task.WhenAll(customersTask, suppliersTask);
            
            customers = await customersTask;
            suppliers = await suppliersTask;
                      
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading form data:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadTransExceptionsData()
    {
        transExceptionsLoading = true;
        try
        {
            // Load TransExceptions data
            var transExceptionsTask = DataService.GetTransExceptionsAsync();
            
            // Load grid column metadata
            var enumMappings = new Dictionary<string, List<string>>
            {
                { "TransactionTypeDisplay", new List<string> { "Order Creation", "Order Cancellation" } }
            };
            
            var columnsTask = LoadTransExceptionColumnsAsync(enumMappings);
            
            await Task.WhenAll(transExceptionsTask, columnsTask);
            
            transExceptions = await transExceptionsTask;
            transExceptionColumns = await columnsTask;
            
            // Apply initial filter
            ApplyTransactionTypeFilter();
        }
        catch (Exception ex)
        {
            // Console logging will be done in OnAfterRenderAsync
            transExceptions = new List<TransExceptionDto>();
            filteredTransExceptions = new List<TransExceptionDto>();
        }
        finally
        {
            transExceptionsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task<List<GridColumnVM>> LoadTransExceptionColumnsAsync(Dictionary<string, List<string>>? enumMappings = null)
    {
        try
        {
            var serviceColumns = await GridColumnService.LoadColumnMetadataAsync("transexceptions", enumMappings);
            
            var uiColumns = serviceColumns.Select(col => new GridColumnVM
            {
                Header = col.Header,
                Field = col.Field,
                Sortable = col.Sortable,
                Filterable = col.Filterable,
                IsNumeric = col.IsNumeric,
                IsEnum = col.IsEnum,
                EnumValues = col.EnumValues
            }).ToList();
            
            return uiColumns;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Failed to load TransException column metadata:", ex.Message);
            return new List<GridColumnVM>();
        }
    }
    
    private void ApplyTransactionTypeFilter()
    {
        if (transExceptions == null)
        {
            filteredTransExceptions = new List<TransExceptionDto>();
            return;
        }
        
        if (string.IsNullOrEmpty(selectedTransactionTypeFilter))
        {
            filteredTransExceptions = transExceptions.ToList();
        }
        else
        {
            // Map display names back to actual types for filtering
            var actualType = selectedTransactionTypeFilter switch
            {
                "Order Creation" => "ORDERCREATION",
                "Order Cancellation" => "ORDERCANCELLATION",
                _ => selectedTransactionTypeFilter
            };
            
            filteredTransExceptions = transExceptions
                .Where(te => te.TransactionType.Equals(actualType, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
    
    private async Task RefreshTransExceptions()
    {
        await LoadTransExceptionsData();
    }
    
    private void IncrementQuantity()
    {
        if (orderQuantity < 5000)
        {
            orderQuantity++;
        }
    }
    
    private void DecrementQuantity()
    {
        if (orderQuantity > 1)
        {
            orderQuantity--;
        }
    }
    
    private void HandleQuantityKeyDown(KeyboardEventArgs e)
    {
        // Handle arrow key navigation for quantity spinner using Code property for reliability
        // Code property provides the physical key code (e.g., "ArrowUp", "ArrowDown")
        if (e.Code == "ArrowUp")
        {
            IncrementQuantity();
        }
        else if (e.Code == "ArrowDown")
        {
            DecrementQuantity();
        }
    }
    
    private async Task InitializeOrder()
    {
        if (!CanProcessOrder) return;
        
        try
        {
            var selectedCustomer = customers?.FirstOrDefault(c => c.CustomerId == selectedCustomerId);
            var selectedSupplier = suppliers?.FirstOrDefault(s => s.SupplierId == selectedSupplierId);
            
            if (selectedCustomer == null || selectedSupplier == null) return;
            
            await OrderFileService.CreateOrderTransactionFileAsync(
                selectedCustomer.Name ?? string.Empty, 
                selectedSupplier.Name ?? string.Empty, 
                orderQuantity);
            
            await JSRuntime.InvokeVoidAsync("console.log", "OrderTransaction.json created successfully");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error creating OrderTransaction.json:", ex.Message);
        }
    }
    
    private async Task CancelOrder()
    {
        if (!CanProcessOrder) return;
        
        try
        {
            var selectedCustomer = customers?.FirstOrDefault(c => c.CustomerId == selectedCustomerId);
            var selectedSupplier = suppliers?.FirstOrDefault(s => s.SupplierId == selectedSupplierId);
            
            if (selectedCustomer == null || selectedSupplier == null) return;
            
            await OrderFileService.CreateOrderCancellationFileAsync(
                selectedCustomer.Name ?? string.Empty, 
                selectedSupplier.Name ?? string.Empty, 
                orderQuantity);
            
            await JSRuntime.InvokeVoidAsync("console.log", "OrderCancellation.json created successfully");
            
            // Reset form after cancellation
            selectedCustomerId = 0;
            selectedSupplierId = 0;
            orderQuantity = 1;
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error creating OrderCancellation.json:", ex.Message);
        }
    }
    
    // Custom dropdown methods
    private void ToggleCustomerDropdown()
    {
        isCustomerDropdownOpen = !isCustomerDropdownOpen;
        if (isCustomerDropdownOpen)
        {
            isSupplierDropdownOpen = false; // Close other dropdown
        }
    }
    
    private void ToggleSupplierDropdown()
    {
        isSupplierDropdownOpen = !isSupplierDropdownOpen;
        if (isSupplierDropdownOpen)
        {
            isCustomerDropdownOpen = false; // Close other dropdown
        }
    }
    
    private void SelectCustomer(int customerId)
    {
        selectedCustomerId = customerId;
        isCustomerDropdownOpen = false;
    }
    
    private void SelectSupplier(int supplierId)
    {
        selectedSupplierId = supplierId;
        isSupplierDropdownOpen = false;
    }
    
    [JSInvokable]
    public void CloseDropdowns()
    {
        isCustomerDropdownOpen = false;
        isSupplierDropdownOpen = false;
        InvokeAsync(StateHasChanged);
    }
}

<script>
    window.setupDropdownHandlers = function (dotNetRef) {
        // Use jQuery for cleaner, cross-browser compatible code
        $(document).ready(function() {
            
            // Click outside handler using jQuery
            $(document).on('click', function(e) {
                // Check if the clicked element is outside any dropdown using jQuery
                if (!$(e.target).closest('.custom-dropdown').length) {
                    dotNetRef.invokeMethodAsync('CloseDropdowns');
                }
            });
            
            // Keyboard handler for Escape key using jQuery
            $(document).on('keydown', function(e) {
                if (e.which === 27 || e.key === 'Escape') { // jQuery uses e.which for key codes
                    dotNetRef.invokeMethodAsync('CloseDropdowns');
                }
            });
            
        });
    };
</script>
