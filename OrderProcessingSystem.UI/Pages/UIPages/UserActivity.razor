@page "/user-activity"
@inject IUserLogService UserLogService

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="page-title">
                    <i class="fas fa-user-clock text-primary me-2"></i>
                    User Activity
                </h2>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" @onclick="RefreshData">
                        <i class="fas fa-sync-alt me-1"></i> Refresh
                    </button>
                </div>
            </div>

            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading user activity...</p>
                </div>
            }
            else if (errorMessage != null)
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                </div>
            }
            else
            {
                <!-- Filters -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <label for="eventTypeFilter" class="form-label">Event Type</label>
                                <select id="eventTypeFilter" class="form-select" @bind="selectedEventType" @bind:after="ApplyFilters">
                                    <option value="">All Types</option>
                                    <option value="ADMIN">Admin</option>
                                    <option value="MANAGER">Manager</option>
                                    <option value="USER">User</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="pageSizeFilter" class="form-label">Page Size</label>
                                <select id="pageSizeFilter" class="form-select" @bind="pageSize" @bind:after="ApplyFilters">
                                    <option value="10">10</option>
                                    <option value="25">25</option>
                                    <option value="50">50</option>
                                    <option value="100">100</option>
                                </select>
                            </div>
                            <div class="col-md-4 d-flex align-items-end">
                                <button class="btn btn-secondary" @onclick="ClearFilters">
                                    <i class="fas fa-times me-1"></i> Clear Filters
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Statistics Cards -->
                <div class="row mb-4">
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="card bg-primary text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Total Logs</h5>
                                        <h3 class="mb-0">@userLogResponse.TotalCount</h3>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-list-alt fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="card bg-success text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Admin Logins</h5>
                                        <h3 class="mb-0">@GetEventTypeCount("ADMIN")</h3>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-crown fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="card bg-warning text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">Manager Logins</h5>
                                        <h3 class="mb-0">@GetEventTypeCount("MANAGER")</h3>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-user-tie fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3 col-sm-6 mb-3">
                        <div class="card bg-info text-white">
                            <div class="card-body">
                                <div class="d-flex justify-content-between">
                                    <div>
                                        <h5 class="card-title">User Logins</h5>
                                        <h3 class="mb-0">@GetEventTypeCount("USER")</h3>
                                    </div>
                                    <div class="align-self-center">
                                        <i class="fas fa-user fa-2x"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- User Activity Table -->
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-table me-2"></i>
                            User Activity Logs
                            @if (!string.IsNullOrEmpty(selectedEventType))
                            {
                                <span class="badge bg-primary ms-2">@selectedEventType</span>
                            }
                        </h5>
                    </div>
                    <div class="card-body">
                        @if (userLogResponse.UserLogs?.Any() == true)
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Event Date</th>
                                            <th>Event Type</th>
                                            <th>User ID</th>
                                            <th>User Name</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var log in userLogResponse.UserLogs)
                                        {
                                            <tr>
                                                <td>@log.EventDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                                <td>
                                                    <span class="badge @GetEventTypeBadgeClass(log.Event)">
                                                        @log.Event
                                                    </span>
                                                </td>
                                                <td>@log.UserId</td>
                                                <td>@log.UserName</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                            <!-- Pagination -->
                            <div class="d-flex justify-content-between align-items-center mt-4">
                                <div>
                                    <span class="text-muted">
                                        Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, userLogResponse.TotalCount) 
                                        of @userLogResponse.TotalCount entries
                                    </span>
                                </div>
                                <nav aria-label="User activity pagination">
                                    <ul class="pagination mb-0">
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(1)" disabled="@(currentPage == 1)">
                                                First
                                            </button>
                                        </li>
                                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(currentPage - 1)" disabled="@(currentPage == 1)">
                                                Previous
                                            </button>
                                        </li>
                                        
                                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(userLogResponse.TotalPages, currentPage + 2); i++)
                                        {
                                            <li class="page-item @(i == currentPage ? "active" : "")">
                                                <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                            </li>
                                        }

                                        <li class="page-item @(currentPage == userLogResponse.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(currentPage + 1)" disabled="@(currentPage == userLogResponse.TotalPages)">
                                                Next
                                            </button>
                                        </li>
                                        <li class="page-item @(currentPage == userLogResponse.TotalPages ? "disabled" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(userLogResponse.TotalPages)" disabled="@(currentPage == userLogResponse.TotalPages)">
                                                Last
                                            </button>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                                <h4 class="text-muted">No user activity found</h4>
                                <p class="text-muted">Try adjusting your filters or refresh the data.</p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private UserLogListResponse userLogResponse = new();
    private bool isLoading = true;
    private string? errorMessage = null;
    private int currentPage = 1;
    private int pageSize = 25;
    private string selectedEventType = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUserLogsAsync();
    }

    private async Task LoadUserLogsAsync()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            userLogResponse = await UserLogService.GetUserLogsAsync(currentPage, pageSize, selectedEventType);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user activity: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ApplyFilters()
    {
        currentPage = 1; // Reset to first page when applying filters
        await LoadUserLogsAsync();
    }

    private async Task ClearFilters()
    {
        selectedEventType = "";
        pageSize = 25;
        currentPage = 1;
        await LoadUserLogsAsync();
    }

    private async Task RefreshData()
    {
        await LoadUserLogsAsync();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= userLogResponse.TotalPages && page != currentPage)
        {
            currentPage = page;
            await LoadUserLogsAsync();
        }
    }

    private string GetEventTypeBadgeClass(string eventType)
    {
        return eventType?.ToUpper() switch
        {
            "ADMIN" => "bg-danger",
            "MANAGER" => "bg-warning",
            "USER" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private int GetEventTypeCount(string eventType)
    {
        if (userLogResponse.UserLogs?.Any() != true)
            return 0;

        return userLogResponse.UserLogs.Count(log => log.Event.Equals(eventType, StringComparison.OrdinalIgnoreCase));
    }
}

<style>
    .page-title {
        color: #333;
        font-weight: 600;
    }

    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
        border: 1px solid rgba(0, 0, 0, 0.125);
    }

    .table th {
        font-weight: 600;
        border-top: none;
    }

    .badge {
        font-size: 0.75em;
    }

    .pagination .page-link {
        color: #6c757d;
        border-color: #dee2e6;
    }

    .pagination .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }

    .pagination .page-link:hover {
        color: #495057;
        background-color: #e9ecef;
        border-color: #dee2e6;
    }
</style>
