@page "/user-activity"
@inject IUserLogService UserLogService
@inject IGridColumnService GridColumnService
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@using OrderProcessingSystem.UI.Shared
@using OrderProcessingSystem.Contracts.Interfaces
@using OrderProcessingSystem.Infrastructure.Services

<link rel="stylesheet" href="~/css/user-activity.css" />

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="page-title">
                    <i class="fas fa-user-clock text-primary me-2"></i>
                    User Activity - Chunked Data Loading
                </h2>
                <div class="d-flex gap-2">
                    <button class="btn btn-outline-primary" @onclick="RefreshData" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <div class="spinner-border spinner-border-sm me-1" role="status"></div>
                        }
                        else
                        {
                            <i class="fas fa-sync-alt me-1"></i>
                        }
                        Refresh
                    </button>
                </div>
            </div>

            @if (initialLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading user activity data...</p>
                </div>
            }
            else if (errorMessage != null)
            {
                <div class="alert alert-danger" role="alert">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    @errorMessage
                </div>
            }
            else
            {
                <!-- Data Summary Card -->
                <div class="card mb-4 border-primary">
                    <div class="card-header bg-primary text-white">
                        <h5 class="mb-0">
                            <i class="fas fa-chart-bar me-2"></i>
                            Data Overview - Chunked Loading Active
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row text-center">
                            <div class="col-md-3">
                                <div class="bg-light p-3 rounded">
                                    <h4 class="text-primary mb-0">@totalRecords</h4>
                                    <small class="text-muted">Total Records</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="bg-light p-3 rounded">
                                    <h4 class="text-info mb-0">@currentPageSize</h4>
                                    <small class="text-muted">Current Page Size</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="bg-light p-3 rounded">
                                    <h4 class="text-success mb-0">@currentPageNumber</h4>
                                    <small class="text-muted">Current Page</small>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <div class="bg-light p-3 rounded">
                                    <h4 class="text-warning mb-0">@totalPages</h4>
                                    <small class="text-muted">Total Pages</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Filters -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5 class="mb-0">
                            <i class="fas fa-filter me-2"></i>
                            Filters & Page Controls
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-3">
                                <label for="eventTypeFilter" class="form-label">Event Type Filter</label>
                                <select id="eventTypeFilter" class="form-select" @bind="selectedEventType" @bind:after="ApplyFilters" disabled="@isLoading">
                                    <option value="">All Types</option>
                                    <option value="ADMIN">Admin</option>
                                    <option value="MANAGER">Manager</option>
                                    <option value="USER">User</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="pageSizeFilter" class="form-label">Chunk Size (Page Size)</label>
                                <select id="pageSizeFilter" class="form-select" @bind="pageSize" @bind:after="ApplyFilters" disabled="@isLoading">
                                    <option value="5">5 records</option>
                                    <option value="10">10 records</option>
                                    <option value="15">15 records</option>
                                    <option value="25">25 records</option>
                                    <option value="50">50 records</option>
                                    <option value="100">100 records</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <label for="quickNav" class="form-label">Quick Navigation</label>
                                <select id="quickNav" class="form-select" @onchange="QuickNavigatePage" disabled="@isLoading">
                                    <option value="">Jump to page...</option>
                                    @for (int i = 1; i <= totalPages; i++)
                                    {
                                        <option value="@i" selected="@(i == currentPageNumber)">Page @i</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-3 d-flex align-items-end">
                                <button class="btn btn-secondary me-2" @onclick="ClearFilters" disabled="@isLoading">
                                    <i class="fas fa-times me-1"></i> Clear Filters
                                </button>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="enableGridScrolling" id="toggleScrolling" disabled="@isLoading">
                                    <label class="form-check-label" for="toggleScrolling">
                                        <small>Grid Scrolling</small>
                                    </label>
                                </div>
                            </div>
                        </div>
                        
                        @if (!string.IsNullOrEmpty(selectedEventType))
                        {
                            <div class="mt-3">
                                <span class="badge bg-primary">Active Filter: @selectedEventType</span>
                            </div>
                        }
                    </div>
                </div>

                <!-- User Activity Grid with Chunked Loading -->
                <div class="card chunked-data-card">
                    <div class="card-header chunked-data-header">
                        <h5 class="mb-0">
                            <i class="fas fa-table me-2"></i>
                            User Activity Logs - Chunked Data View
                            @if (!string.IsNullOrEmpty(selectedEventType))
                            {
                                <span class="filter-active-indicator ms-2">Filtered by: @selectedEventType</span>
                            }
                        </h5>
                        <small class="mt-1 d-block">
                            Data loaded in chunks of <span class="page-size-badge">@pageSize records</span>. 
                            Total available: <strong>@totalRecords records</strong> across <strong>@totalPages pages</strong>.
                            @if (enableGridScrolling)
                            {
                                <br/><span class="badge bg-success mt-1"><i class="fas fa-scroll me-1"></i>Grid Scrolling Enabled</span>
                            }
                            else
                            {
                                <br/><span class="badge bg-info mt-1"><i class="fas fa-arrows-v me-1"></i>Page Scrolling Mode</span>
                            }
                        </small>
                    </div>
                    <div class="card-body p-0">
                        @if (isLoading)
                        {
                            <div class="loading-chunk-overlay chunk-loading">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading chunk...</span>
                                </div>
                                <p class="mt-2 text-muted mb-0">
                                    <span class="chunked-loading-indicator">
                                        Loading chunk @currentPageNumber of @totalPages
                                    </span>
                                </p>
                            </div>
                        }
                        else if (userLogViewModels?.Any() == true)
                        {
                            <GenericGrid TItem="UserLogVM" 
                                         Items="userLogViewModels" 
                                         Columns="gridColumns" 
                                         DefaultPageSize="5"
                                         ShowInternalPagination="false"
                                         ShowSimplePagination="true"
                                         ShowPageSizeSelector="false"
                                         ShowItemCount="false"
                                         EnableGridScrolling="@enableGridScrolling"
                                         GridMaxHeight="500px"
                                         StickyHeader="true" />
                            
                            <!-- Custom Chunk Navigation Controls -->
                            <div class="px-3 pb-3">
                                <div class="row align-items-center">
                                    <div class="col-md-6">
                                        <div class="d-flex align-items-center gap-3">
                                            <small class="text-muted">
                                                <i class="fas fa-info-circle me-1"></i>
                                                <span class="chunk-info-badge">
                                                    Chunk @currentPageNumber of @totalPages
                                                </span>
                                            </small>
                                            <small class="text-muted">
                                                Records: <strong>@((currentPageNumber - 1) * pageSize + 1) - @Math.Min(currentPageNumber * pageSize, totalRecords)</strong> of <strong>@totalRecords</strong>
                                            </small>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <nav aria-label="Chunk navigation" class="d-flex justify-content-end chunk-navigation">
                                            <div class="btn-group" role="group" aria-label="Chunk navigation">
                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                        @onclick="() => GoToChunk(1)" 
                                                        disabled="@(currentPageNumber == 1 || isLoading)">
                                                    <i class="fas fa-angle-double-left"></i> First
                                                </button>
                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                        @onclick="() => GoToChunk(currentPageNumber - 1)" 
                                                        disabled="@(currentPageNumber == 1 || isLoading)">
                                                    <i class="fas fa-angle-left"></i> Previous
                                                </button>
                                                <span class="btn btn-primary btn-sm">
                                                    Page @currentPageNumber
                                                </span>
                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                        @onclick="() => GoToChunk(currentPageNumber + 1)" 
                                                        disabled="@(currentPageNumber == totalPages || isLoading)">
                                                    Next <i class="fas fa-angle-right"></i>
                                                </button>
                                                <button type="button" class="btn btn-outline-primary btn-sm" 
                                                        @onclick="() => GoToChunk(totalPages)" 
                                                        disabled="@(currentPageNumber == totalPages || isLoading)">
                                                    Last <i class="fas fa-angle-double-right"></i>
                                                </button>
                                            </div>
                                        </nav>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-5">
                                <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                                <h4 class="text-muted">No user activity found</h4>
                                <p class="text-muted">
                                    @if (!string.IsNullOrEmpty(selectedEventType))
                                    {
                                        <text>No records found for event type "@selectedEventType"</text>
                                    }
                                    else
                                    {
                                        <text>Try refreshing the data or check the system logs.</text>
                                    }
                                </p>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<link rel="stylesheet" href="~/css/user-activity-chunked.css" />
<script src="~/js/scrollable-grid.js"></script>

@code {
    // Data properties for chunked loading
    private UserLogListResponse userLogResponse = new();
    private List<UserLogVM>? userLogViewModels = new();
    private List<GridColumnVM> gridColumns = new();
    
    // Loading states
    private bool initialLoading = true;
    private bool isLoading = false;
    private string? errorMessage = null;
    
    // Pagination properties (chunked data loading)
    private int currentPageNumber = 1;
    private int pageSize = 5; // Changed to 5 to match GenericGrid DefaultPageSize
    private string selectedEventType = "";
    private bool enableGridScrolling = true; // Toggle for grid scrolling vs page scrolling
    
    // Computed properties for display
    private int totalRecords => userLogResponse.TotalCount;
    private int totalPages => userLogResponse.TotalPages;
    private int currentPageSize => pageSize;

    protected override async Task OnInitializedAsync()
    {
        await LoadGridColumnsAsync();
        await LoadUserLogsAsync();
        initialLoading = false;
    }

    /// <summary>
    /// Load grid column metadata for UserLog display
    /// </summary>
    private Task LoadGridColumnsAsync()
    {
        try
        {
            // Create columns for UserLog display compatible with GridColumnVM
            gridColumns = new List<GridColumnVM>
            {
                new() 
                { 
                    Field = "EventDate", 
                    Header = "Event Date", 
                    Sortable = true,
                    Filterable = true
                },
                new() 
                { 
                    Field = "Event", 
                    Header = "Event Type", 
                    Sortable = true,
                    Filterable = true,
                    IsEnum = true,
                    EnumValues = new List<string> { "ADMIN", "MANAGER", "USER" }
                },
                new() 
                { 
                    Field = "UserId", 
                    Header = "User ID", 
                    Sortable = true,
                    Filterable = true
                },
                new() 
                { 
                    Field = "UserName", 
                    Header = "User Name", 
                    Sortable = true,
                    Filterable = true
                }
            };
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading column metadata: {ex.Message}";
        }
        
        return Task.CompletedTask;
    }

    /// <summary>
    /// Load user logs using chunked pagination from API
    /// </summary>
    private async Task LoadUserLogsAsync()
    {
        isLoading = true;
        errorMessage = null;
        StateHasChanged();

        try
        {
            // Call API with pagination parameters - this loads data in chunks
            userLogResponse = await UserLogService.GetUserLogsAsync(
                currentPageNumber, 
                pageSize, 
                selectedEventType);

            // Convert DTOs to ViewModels for grid display
            userLogViewModels = userLogResponse.UserLogs.Select(dto => new UserLogVM
            {
                Id = dto.Id,
                EventDate = dto.EventDate,
                Event = dto.Event,
                UserId = dto.UserId,
                UserName = dto.UserName
            }).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading user activity: {ex.Message}";
            userLogViewModels = new List<UserLogVM>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Apply filters and reset to first chunk/page
    /// </summary>
    private async Task ApplyFilters()
    {
        currentPageNumber = 1; // Reset to first chunk when applying filters
        await LoadUserLogsAsync();
    }

    /// <summary>
    /// Clear all filters and reset pagination
    /// </summary>
    private async Task ClearFilters()
    {
        selectedEventType = "";
        pageSize = 5; // Changed to 5 to match GenericGrid DefaultPageSize
        currentPageNumber = 1;
        await LoadUserLogsAsync();
    }

    /// <summary>
    /// Refresh current data chunk
    /// </summary>
    private async Task RefreshData()
    {
        await LoadUserLogsAsync();
    }

    /// <summary>
    /// Navigate to a specific chunk/page
    /// </summary>
    private async Task GoToChunk(int chunkNumber)
    {
        if (chunkNumber >= 1 && chunkNumber <= totalPages && chunkNumber != currentPageNumber)
        {
            currentPageNumber = chunkNumber;
            await LoadUserLogsAsync();
        }
    }

    /// <summary>
    /// Quick navigation using dropdown
    /// </summary>
    private async Task QuickNavigatePage(ChangeEventArgs e)
    {
        if (int.TryParse(e?.Value?.ToString(), out var pageNumber))
        {
            await GoToChunk(pageNumber);
        }
    }

    /// <summary>
    /// Get badge CSS class for event types
    /// </summary>
    private string GetEventTypeBadgeClass(string eventType)
    {
        return eventType?.ToUpper() switch
        {
            "ADMIN" => "bg-danger",
            "MANAGER" => "bg-warning",
            "USER" => "bg-info",
            _ => "bg-secondary"
        };
    }
}
