@page "/role-selection"
@using Microsoft.JSInterop
@using OrderProcessingSystem.UI.Models
@using OrderProcessingSystem.Contracts.Interfaces
@using OrderProcessingSystem.Contracts.Dto
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject IUserLogService UserLogService
@inject ILogger<RoleSelection> Logger

<div class="role-selection-container">
    <div class="role-selection-card">
        <div class="provider-info">
            <i class="@GetProviderIcon() provider-icon @(Provider?.ToLower())"></i>
            <h2 class="mt-3">@GetProviderDisplayName() Authentication</h2>
            <p class="text-muted">Select your role to continue</p>
        </div>

        <div class="role-buttons">
            <button class="role-btn admin-btn" @onclick="@(() => LoginAsRole("Admin"))" disabled="@isLoading">
                @if (isLoading && selectedRole == "Admin")
                {
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                }
                else
                {
                    <i class="fas fa-crown me-2"></i>
                }
                <span>LOGIN AS ADMIN</span>
                <small class="d-block">Full system access</small>
            </button>

            <button class="role-btn manager-btn" @onclick="@(() => LoginAsRole("Manager"))" disabled="@isLoading">
                @if (isLoading && selectedRole == "Manager")
                {
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                }
                else
                {
                    <i class="fas fa-user-tie me-2"></i>
                }
                <span>LOGIN AS MANAGER</span>
                <small class="d-block">Manage orders & reports</small>
            </button>

            <button class="role-btn user-btn" @onclick="@(() => LoginAsRole("User"))" disabled="@isLoading">
                @if (isLoading && selectedRole == "User")
                {
                    <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                }
                else
                {
                    <i class="fas fa-user me-2"></i>
                }
                <span>LOGIN AS USER</span>
                <small class="d-block">View orders & basic access</small>
            </button>
        </div>

        <div class="back-section">
            <button class="btn btn-outline-secondary" @onclick="GoBack">
                <i class="fas fa-arrow-left me-1"></i> Back to Login
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] [SupplyParameterFromQuery] public string? Provider { get; set; }
    
    private bool isLoading = false;
    private string selectedRole = string.Empty;

    private async Task LoginAsRole(string role)
    {
        try
        {
            isLoading = true;
            selectedRole = role;
            StateHasChanged();

            // Log the button click event to UserLogs table
            await LogUserButtonClick(role);

            await Task.Delay(1000); // Simulate processing

            // Create user data based on role and provider (back to demo tokens)
            var userData = CreateUserData(role, Provider ?? "Unknown");
            
            // Store authentication details in localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authProvider", Provider ?? "Unknown");
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", $"demo_token_{Guid.NewGuid():N}");
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userName", userData.Name);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userEmail", userData.Email);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userRole", role);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "loginTime", DateTime.UtcNow.ToString("O"));
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "isAuthenticated", "true");

            Console.WriteLine($"Demo token generated successfully for {role}");
            
            // Redirect to auth success page
            Navigation.NavigateTo($"/auth-success?provider={Provider}&demo=true&role={role}", true);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during role selection for {Role}", role);
            Console.WriteLine($"Error during role selection: {ex.Message}");
            isLoading = false;
            selectedRole = string.Empty;
            StateHasChanged();
        }
    }

    private (string Name, string Email) CreateUserData(string role, string provider)
    {
        var providerDomain = provider.ToLower() == "microsoft" ? "microsoft.com" : "gmail.com";
        
        return role switch
        {
            "Admin" => ("Sanjeev P (Admin)", $"sanjeev.admin@{providerDomain}"),
            "Manager" => ("Sanjeev P (Manager)", $"sanjeev.manager@{providerDomain}"),
            "User" => ("Sanjeev P (User)", $"sanjeev.user@{providerDomain}"),
            _ => ("Sanjeev P", $"sanjeev.p@{providerDomain}")
        };
    }

    /// <summary>
    /// Logs the button click event to UserLogs table with random user data and proper timestamp
    /// </summary>
    /// <param name="eventType">The type of login event (Admin, Manager, User)</param>
    private async Task LogUserButtonClick(string eventType)
    {
        try
        {
            Logger.LogInformation("Logging user button click for event type: {EventType}", eventType);

            var loginRequest = new LoginEventRequest
            {
                EventType = eventType.ToUpper() // API expects uppercase values
            };

            var response = await UserLogService.LogLoginEventAsync(loginRequest);
            
            if (response.Success)
            {
                Logger.LogInformation("Successfully logged user event: ID={Id}, User={UserName}, Email={UserId}, Timestamp={EventDate}", 
                    response.Id, response.UserName, response.UserId, response.EventDate);
                Console.WriteLine($"UserLog created successfully: {response.UserName} ({response.Event}) at {response.EventDate:yyyy-MM-dd HH:mm:ss}");
            }
            else
            {
                Logger.LogWarning("Failed to log user event: {Message}", response.Message);
                Console.WriteLine($"Warning: Failed to log user event - {response.Message}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error logging user button click for event type: {EventType}", eventType);
            Console.WriteLine($"Error logging user event: {ex.Message}");
            // Don't throw - allow login process to continue even if logging fails
        }
    }

    private string GetProviderIcon()
    {
        return Provider?.ToLower() switch
        {
            "microsoft" => "fab fa-microsoft",
            "google" => "fab fa-google",
            _ => "fas fa-user-shield"
        };
    }

    private string GetProviderColor()
    {
        return Provider?.ToLower() switch
        {
            "microsoft" => "#00BCF2",
            "google" => "#4285F4",
            _ => "#6c757d"
        };
    }

    private string GetProviderDisplayName()
    {
        return Provider?.ToLower() switch
        {
            "microsoft" => "Microsoft",
            "google" => "Google",
            _ => "OAuth"
        };
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/", true);
    }
}
