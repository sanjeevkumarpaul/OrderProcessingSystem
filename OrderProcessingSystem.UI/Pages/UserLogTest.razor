@page "/userlog-test"
@using OrderProcessingSystem.Contracts.Interfaces
@using OrderProcessingSystem.Contracts.Dto
@inject IUserLogService UserLogService
@inject ILogger<UserLogTest> Logger

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h3>UserLog Test Page</h3>
                    <p class="text-muted">Test the UserLog functionality by clicking the buttons below</p>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-danger btn-lg" @onclick="@(() => TestUserLog("ADMIN"))" disabled="@isLoading">
                            @if (isLoading && currentTest == "ADMIN")
                            {
                                <div class="spinner-border spinner-border-sm me-2"></div>
                            }
                            else
                            {
                                <i class="fas fa-crown me-2"></i>
                            }
                            Test ADMIN Login Log
                        </button>
                        
                        <button class="btn btn-warning btn-lg" @onclick="@(() => TestUserLog("MANAGER"))" disabled="@isLoading">
                            @if (isLoading && currentTest == "MANAGER")
                            {
                                <div class="spinner-border spinner-border-sm me-2"></div>
                            }
                            else
                            {
                                <i class="fas fa-user-tie me-2"></i>
                            }
                            Test MANAGER Login Log
                        </button>
                        
                        <button class="btn btn-success btn-lg" @onclick="@(() => TestUserLog("USER"))" disabled="@isLoading">
                            @if (isLoading && currentTest == "USER")
                            {
                                <div class="spinner-border spinner-border-sm me-2"></div>
                            }
                            else
                            {
                                <i class="fas fa-user me-2"></i>
                            }
                            Test USER Login Log
                        </button>
                    </div>

                    @if (!string.IsNullOrEmpty(lastResult))
                    {
                        <div class="mt-4">
                            <div class="alert @(isSuccess ? "alert-success" : "alert-danger")">
                                <h6><i class="fas @(isSuccess ? "fa-check-circle" : "fa-exclamation-triangle")"></i> Last Test Result:</h6>
                                <pre>@lastResult</pre>
                            </div>
                        </div>
                    }

                    <div class="mt-4">
                        <a href="/useractivity" class="btn btn-primary">
                            <i class="fas fa-list me-1"></i> View All User Logs
                        </a>
                        <a href="/" class="btn btn-secondary ms-2">
                            <i class="fas fa-home me-1"></i> Back to Home
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private string currentTest = string.Empty;
    private string lastResult = string.Empty;
    private bool isSuccess = false;

    private async Task TestUserLog(string eventType)
    {
        try
        {
            isLoading = true;
            currentTest = eventType;
            isSuccess = false;
            StateHasChanged();

            Logger.LogInformation("Testing UserLog for event type: {EventType}", eventType);

            var loginRequest = new LoginEventRequest
            {
                EventType = eventType
            };

            var response = await UserLogService.LogLoginEventAsync(loginRequest);
            
            if (response.Success)
            {
                isSuccess = true;
                lastResult = $"SUCCESS!\n" +
                           $"ID: {response.Id}\n" +
                           $"Event: {response.Event}\n" +
                           $"User Name: {response.UserName}\n" +
                           $"User Email: {response.UserId}\n" +
                           $"Timestamp: {response.EventDate:yyyy-MM-dd HH:mm:ss UTC}\n" +
                           $"Message: {response.Message}";
                
                Logger.LogInformation("UserLog test successful: {Result}", lastResult);
            }
            else
            {
                isSuccess = false;
                lastResult = $"FAILED!\nMessage: {response.Message}";
                Logger.LogWarning("UserLog test failed: {Message}", response.Message);
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            lastResult = $"ERROR!\nException: {ex.Message}\nStack Trace: {ex.StackTrace}";
            Logger.LogError(ex, "Error during UserLog test for event type: {EventType}", eventType);
        }
        finally
        {
            isLoading = false;
            currentTest = string.Empty;
            StateHasChanged();
        }
    }
}
