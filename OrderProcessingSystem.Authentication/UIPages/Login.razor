@page "/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="login-container">
    <div class="login-card">
        @if (!isAuthenticated)
        {
            <!-- OAuth Login Section -->
            <div class="oauth-section">
                <h2 class="login-title">Welcome to Order Processing System</h2>
                <p class="login-subtitle">Please sign in to continue</p>
                
                <div class="oauth-buttons">
                    <button class="oauth-btn microsoft-btn" @onclick="LoginWithMicrosoft" disabled="@isLoading">
                        @if (isLoading && currentProvider == "Microsoft")
                        {
                            <div class="spinner"></div>
                            <span>Signing in...</span>
                        }
                        else
                        {
                            <i class="fab fa-microsoft"></i>
                            <span>Login Via Microsoft</span>
                        }
                    </button>
                    
                    <button class="oauth-btn google-btn" @onclick="LoginWithGoogle" disabled="@isLoading">
                        @if (isLoading && currentProvider == "Google")
                        {
                            <div class="spinner"></div>
                            <span>Signing in...</span>
                        }
                        else
                        {
                            <i class="fab fa-google"></i>
                            <span>Login Via Google</span>
                        }
                    </button>
                </div>
                
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle"></i>
                        <span>@errorMessage</span>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Role Selection Section -->
            <div class="role-selection">
                <h2 class="welcome-title">Welcome, @userDisplayName!</h2>
                <p class="role-subtitle">Please select your role to continue</p>
                
                <div class="role-buttons">
                    <button class="role-btn admin-btn" @onclick="() => LoginAsRole('Admin')">
                        <div class="role-icon">
                            <i class="fas fa-crown"></i>
                        </div>
                        <div class="role-content">
                            <h3>LOGIN AS ADMIN</h3>
                            <p>Full system access and management</p>
                        </div>
                    </button>
                    
                    <button class="role-btn manager-btn" @onclick="() => LoginAsRole('Manager')">
                        <div class="role-icon">
                            <i class="fas fa-users-cog"></i>
                        </div>
                        <div class="role-content">
                            <h3>LOGIN AS MANAGER</h3>
                            <p>Manage orders and team operations</p>
                        </div>
                    </button>
                    
                    <button class="role-btn user-btn" @onclick="() => LoginAsRole('User')">
                        <div class="role-icon">
                            <i class="fas fa-user"></i>
                        </div>
                        <div class="role-content">
                            <h3>LOGIN AS USER</h3>
                            <p>View and process your orders</p>
                        </div>
                    </button>
                </div>
                
                <div class="logout-section">
                    <button class="logout-btn" @onclick="Logout">
                        <i class="fas fa-sign-out-alt"></i>
                        Sign out
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private bool isAuthenticated = false;
    private bool isLoading = false;
    private string currentProvider = string.Empty;
    private string errorMessage = string.Empty;
    private string userDisplayName = string.Empty;
    private string userEmail = string.Empty;
    private string accessToken = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated with valid token
        await CheckAuthenticationStatus();
    }

    private async Task LoginWithMicrosoft()
    {
        try
        {
            isLoading = true;
            currentProvider = "Microsoft";
            errorMessage = string.Empty;
            StateHasChanged();

            // Simulate Microsoft OAuth flow
            await Task.Delay(2000); // Simulate network delay
            
            // In real implementation, this would redirect to Microsoft OAuth endpoint
            // For now, simulate successful authentication
            await SimulateSuccessfulLogin("Microsoft", "John Doe", "john.doe@contoso.com", "ms_token_12345");
        }
        catch (Exception ex)
        {
            errorMessage = $"Microsoft login failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            currentProvider = string.Empty;
            StateHasChanged();
        }
    }

    private async Task LoginWithGoogle()
    {
        try
        {
            isLoading = true;
            currentProvider = "Google";
            errorMessage = string.Empty;
            StateHasChanged();

            // Simulate Google OAuth flow
            await Task.Delay(2000); // Simulate network delay
            
            // In real implementation, this would redirect to Google OAuth endpoint
            // For now, simulate successful authentication
            await SimulateSuccessfulLogin("Google", "Jane Smith", "jane.smith@gmail.com", "google_token_67890");
        }
        catch (Exception ex)
        {
            errorMessage = $"Google login failed: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            currentProvider = string.Empty;
            StateHasChanged();
        }
    }

    private async Task SimulateSuccessfulLogin(string provider, string displayName, string email, string token)
    {
        // Store authentication details
        isAuthenticated = true;
        userDisplayName = displayName;
        userEmail = email;
        accessToken = token;

        // Store in localStorage for persistence
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "authProvider", provider);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "accessToken", token);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userName", displayName);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userEmail", email);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", "loginTime", DateTime.UtcNow.ToString("O"));

        StateHasChanged();
    }

    private async Task LoginAsRole(string role)
    {
        try
        {
            // Store the selected role
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", "userRole", role);
            
            // Redirect based on role
            var redirectUrl = role.ToLower() switch
            {
                "admin" => "/admin/dashboard",
                "manager" => "/manager/dashboard", 
                "user" => "/dashboard",
                _ => "/dashboard"
            };
            
            Navigation.NavigateTo(redirectUrl);
        }
        catch (Exception ex)
        {
            errorMessage = $"Role selection failed: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task Logout()
    {
        try
        {
            // Clear authentication state
            isAuthenticated = false;
            userDisplayName = string.Empty;
            userEmail = string.Empty;
            accessToken = string.Empty;
            errorMessage = string.Empty;
            
            // Clear localStorage
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "authProvider");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "accessToken");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userName");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userEmail");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userRole");
            await JSRuntime.InvokeVoidAsync("localStorage.removeItem", "loginTime");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = $"Logout failed: {ex.Message}";
            StateHasChanged();
        }
    }

    private async Task CheckAuthenticationStatus()
    {
        try
        {
            // Check for existing valid token
            var storedToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "accessToken");
            var storedUser = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userName");
            var loginTimeStr = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "loginTime");

            if (!string.IsNullOrEmpty(storedToken) && !string.IsNullOrEmpty(storedUser))
            {
                // Check if token is still valid (24 hours expiry)
                if (DateTime.TryParse(loginTimeStr, out var loginTime))
                {
                    if (DateTime.UtcNow.Subtract(loginTime).TotalHours < 24)
                    {
                        // Token is still valid
                        isAuthenticated = true;
                        userDisplayName = storedUser;
                        userEmail = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userEmail") ?? "";
                        accessToken = storedToken;
                    }
                    else
                    {
                        // Token expired, clear storage
                        await Logout();
                    }
                }
            }
        }
        catch (Exception)
        {
            // If there's an error checking auth status, assume not authenticated
            isAuthenticated = false;
        }
    }
}

<style>
    .login-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
    }

    .login-card {
        background: white;
        border-radius: 20px;
        box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        padding: 40px;
        max-width: 500px;
        width: 100%;
        text-align: center;
    }

    .login-title {
        color: #333;
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 10px;
    }

    .login-subtitle, .role-subtitle {
        color: #666;
        font-size: 1.1rem;
        margin-bottom: 30px;
    }

    .welcome-title {
        color: #333;
        font-size: 2rem;
        font-weight: 700;
        margin-bottom: 10px;
        background: linear-gradient(135deg, #667eea, #764ba2);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    .oauth-buttons, .role-buttons {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-bottom: 20px;
    }

    .oauth-btn {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 15px;
        padding: 15px 20px;
        border: none;
        border-radius: 12px;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        text-decoration: none;
    }

    .microsoft-btn {
        background: #0078d4;
        color: white;
    }

    .microsoft-btn:hover {
        background: #106ebe;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,120,212,0.4);
    }

    .google-btn {
        background: #db4437;
        color: white;
    }

    .google-btn:hover {
        background: #c23321;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(219,68,55,0.4);
    }

    .demo-btn {
        background: #28a745;
        color: white;
    }

    .demo-btn:hover {
        background: #218838;
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(40,167,69,0.4);
    }

    .role-btn {
        display: flex;
        align-items: center;
        gap: 20px;
        padding: 20px;
        border: none;
        border-radius: 15px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: left;
        background: white;
        border: 2px solid #e9ecef;
    }

    .role-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }

    .admin-btn:hover {
        border-color: #dc3545;
        background: linear-gradient(135deg, #dc3545 0%, #c82333 100%);
        color: white;
    }

    .manager-btn:hover {
        border-color: #fd7e14;
        background: linear-gradient(135deg, #fd7e14 0%, #e55a00 100%);
        color: white;
    }

    .user-btn:hover {
        border-color: #20c997;
        background: linear-gradient(135deg, #20c997 0%, #17a085 100%);
        color: white;
    }

    .role-icon {
        font-size: 2rem;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        background: #f8f9fa;
        color: #6c757d;
        flex-shrink: 0;
    }

    .admin-btn:hover .role-icon {
        background: rgba(255,255,255,0.2);
        color: white;
    }

    .manager-btn:hover .role-icon {
        background: rgba(255,255,255,0.2);
        color: white;
    }

    .user-btn:hover .role-icon {
        background: rgba(255,255,255,0.2);
        color: white;
    }

    .role-content h3 {
        margin: 0 0 5px 0;
        font-size: 1.2rem;
        font-weight: 700;
    }

    .role-content p {
        margin: 0;
        font-size: 0.9rem;
        opacity: 0.8;
    }

    .divider {
        margin: 20px 0;
        position: relative;
        color: #666;
    }

    .divider::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 1px;
        background: #e9ecef;
    }

    .divider span {
        background: white;
        padding: 0 15px;
    }

    .logout-section {
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e9ecef;
    }

    .logout-btn {
        background: none;
        border: 1px solid #dc3545;
        color: #dc3545;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 0.9rem;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 8px;
        margin: 0 auto;
    }

    .logout-btn:hover {
        background: #dc3545;
        color: white;
    }

    .spinner {
        width: 20px;
        height: 20px;
        border: 2px solid transparent;
        border-top: 2px solid currentColor;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    .error-message {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 12px 16px;
        border-radius: 8px;
        margin-top: 15px;
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 0.9rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    @@media (max-width: 600px) {
        .login-card {
            padding: 30px 20px;
        }
        
        .role-btn {
            flex-direction: column;
            text-align: center;
            gap: 15px;
        }
        
        .role-content {
            text-align: center;
        }
    }
</style>
