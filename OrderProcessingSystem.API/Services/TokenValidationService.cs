using Microsoft.Extensions.Configuration;

namespace OrderProcessingSystem.API.Services;

/// <summary>
/// Simple token validation service for API authentication
/// Simulates JWT token validation for development/demo purposes
/// </summary>
public interface ITokenValidationService
{
    /// <summary>
    /// Validates if the provided token is valid
    /// </summary>
    /// <param name="token">The token to validate</param>
    /// <returns>True if token is valid, false otherwise</returns>
    bool ValidateToken(string token);
    
    /// <summary>
    /// Extracts user information from token
    /// </summary>
    /// <param name="token">The token to extract user info from</param>
    /// <returns>User information if token is valid, null otherwise</returns>
    TokenUserInfo? GetUserFromToken(string token);
}

/// <summary>
/// User information extracted from token
/// </summary>
public class TokenUserInfo
{
    public string Username { get; set; } = string.Empty;
    public string Email { get; set; } = string.Empty;
    public List<string> Roles { get; set; } = new();
}

/// <summary>
/// Implementation of token validation service
/// </summary>
public class TokenValidationService : ITokenValidationService
{
    private readonly ILogger<TokenValidationService> _logger;
    private readonly IConfiguration _configuration;
    
    // For demo purposes, we'll accept these predefined tokens
    private readonly Dictionary<string, TokenUserInfo> _validTokens = new()
    {
        {
            "demo-token-microsoft-user", 
            new TokenUserInfo 
            { 
                Username = "sanjeev.p", 
                Email = "sanjeev.p@microsoft.com", 
                Roles = new List<string> { "User", "Admin" } 
            }
        },
        {
            "demo-token-google-user", 
            new TokenUserInfo 
            { 
                Username = "sanjeev.p", 
                Email = "sanjeev.p@gmail.com", 
                Roles = new List<string> { "User" } 
            }
        },
        {
            "api-test-token", 
            new TokenUserInfo 
            { 
                Username = "api-tester", 
                Email = "test@example.com", 
                Roles = new List<string> { "User", "Tester" } 
            }
        }
    };

    public TokenValidationService(ILogger<TokenValidationService> logger, IConfiguration configuration)
    {
        _logger = logger;
        _configuration = configuration;
    }

    public bool ValidateToken(string token)
    {
        if (string.IsNullOrWhiteSpace(token))
        {
            _logger.LogWarning("Token validation failed: Token is null or empty");
            return false;
        }

        // Remove "Bearer " prefix if present
        if (token.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
        {
            token = token.Substring("Bearer ".Length).Trim();
        }

        // Check predefined demo tokens first
        var isValid = _validTokens.ContainsKey(token);
        
        if (!isValid)
        {
            // Check for dynamic tokens from AuthenticationService
            // Format: {username}_{ticks}_{guid}
            isValid = IsValidDynamicToken(token);
        }
        
        if (isValid)
        {
            _logger.LogInformation("Token validation successful for token: {TokenPrefix}...", 
                token.Length > 10 ? token.Substring(0, 10) : token);
        }
        else
        {
            _logger.LogWarning("Token validation failed for token: {TokenPrefix}...", 
                token.Length > 10 ? token.Substring(0, 10) : token);
        }

        return isValid;
    }

    /// <summary>
    /// Validates dynamic tokens generated by AuthenticationService
    /// </summary>
    /// <param name="token">Token to validate</param>
    /// <returns>True if valid dynamic token format</returns>
    private bool IsValidDynamicToken(string token)
    {
        try
        {
            var parts = token.Split('_');
            if (parts.Length == 3)
            {
                var username = parts[0];
                var ticks = parts[1];
                var guid = parts[2];

                // Basic validation - has username, ticks is numeric, guid is alphanumeric
                if (!string.IsNullOrEmpty(username) && 
                    long.TryParse(ticks, out _) && 
                    !string.IsNullOrEmpty(guid) && 
                    guid.Length == 32) // GUID without hyphens
                {
                    _logger.LogDebug("Valid dynamic token format for user: {Username}", username);
                    return true;
                }
            }
            
            return false;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error validating dynamic token");
            return false;
        }
    }

    public TokenUserInfo? GetUserFromToken(string token)
    {
        if (string.IsNullOrWhiteSpace(token))
            return null;

        // Remove "Bearer " prefix if present
        if (token.StartsWith("Bearer ", StringComparison.OrdinalIgnoreCase))
        {
            token = token.Substring("Bearer ".Length).Trim();
        }

        // Try predefined tokens first
        if (_validTokens.TryGetValue(token, out var userInfo))
        {
            _logger.LogInformation("Successfully extracted user info for: {Username}", userInfo.Username);
            return userInfo;
        }

        // Try dynamic tokens
        var dynamicUserInfo = GetUserInfoFromDynamicToken(token);
        if (dynamicUserInfo != null)
        {
            _logger.LogInformation("Successfully extracted user info from dynamic token for: {Username}", dynamicUserInfo.Username);
            return dynamicUserInfo;
        }

        _logger.LogWarning("Could not extract user info from token");
        return null;
    }

    /// <summary>
    /// Extracts user info from dynamic token
    /// </summary>
    /// <param name="token">Dynamic token</param>
    /// <returns>User info if valid, null otherwise</returns>
    private TokenUserInfo? GetUserInfoFromDynamicToken(string token)
    {
        try
        {
            if (IsValidDynamicToken(token))
            {
                var parts = token.Split('_');
                var username = parts[0];
                
                return new TokenUserInfo
                {
                    Username = username,
                    Email = $"{username}@example.com", // Mock email
                    Roles = new List<string> { "User" } // Default role for dynamic tokens
                };
            }
            
            return null;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error extracting user info from dynamic token");
            return null;
        }
    }
}
