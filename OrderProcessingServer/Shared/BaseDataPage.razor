@using OrderProcessingSystem.Infrastructure.Services
@using OrderProcessingSystem.Contracts.Interfaces
@using OrderProcessingServer.Shared.UIComponents
@using Microsoft.AspNetCore.Components
@using OrderProcessingSystem.Utilities.Extensions
@using Microsoft.JSInterop
@inject IGridColumnService GridColumnService
@inject DataLoadingService DataService
@inject IJSRuntime JS
@inherits ComponentBase

@typeparam TItem

@* Common page structure *@
<h1 class="page-title d-flex justify-content-between align-items-center">
  <span class="title-text">@PageTitle</span>
  <div class="header-controls">
    <button class="btn btn-sm btn-primary" @onclick="ToggleView">@((showGrid) ? ShowCardsText : ShowGridText)</button>
  </div>
</h1>

@if (Items == null)
{
    <p><em>Loading...</em></p>
}
else if (showGrid)
{
    <GenericGrid TItem="TItem" Items="Items" Columns="Columns" PageSize="@GridPageSize" />
}
else
{
    <GenericCards TItem="TItem" Items="Items" Columns="Columns" PageSize="@CardPageSize" CardColumnClass="@CardColumnClass">
        <CardTemplate Context="item">
            @CardTemplate!(item)
        </CardTemplate>
    </GenericCards>
}

@code {
    // Make DataService accessible to derived classes
    protected DataLoadingService DataLoadingService => DataService;
    
    // Data and UI state
    protected List<TItem>? Items { get; set; } = null;
    protected bool showGrid = false; // Start with cards by default
    protected List<GridColumnVM> Columns { get; set; } = new List<GridColumnVM>();
    
    // Parameters for customization
    [Parameter] public string PageTitle { get; set; } = "Data";
    [Parameter] public string EntityName { get; set; } = "";
    [Parameter] public string ShowCardsText { get; set; } = "Show Cards";
    [Parameter] public string ShowGridText { get; set; } = "Show Grid";
    [Parameter] public int GridPageSize { get; set; } = 10;
    [Parameter] public int CardPageSize { get; set; } = 12;
    [Parameter] public string CardColumnClass { get; set; } = "col-12 col-sm-6 col-md-4 col-xl-3 mb-3";
    [Parameter] public RenderFragment<TItem>? CardTemplate { get; set; }
    [Parameter] public Func<Task<List<TItem>?>>? DataLoader { get; set; }
    [Parameter] public Dictionary<string, List<string>>? EnumMappings { get; set; }

    private bool _loaded;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || _loaded) return;
        _loaded = true;

        await LoadDataAsync();
    }

    /// <summary>
    /// Loads data and column metadata
    /// </summary>
    protected async Task LoadDataAsync()
    {
        try
        {
            // Load data using the provided data loader function
            if (DataLoader != null)
            {
                Items = await DataLoader();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading {EntityName}: {ex.Message}");
        }
        finally
        {
            // Load column metadata
            if (!string.IsNullOrEmpty(EntityName))
            {
                Columns = await LoadUIColumnMetadataAsync(EntityName, EnumMappings);
            }
            
            // Ensure Items is never null
            Items = (Items?.Any() == true) ? Items : new List<TItem>();
            await InvokeAsync(StateHasChanged);
        }
    }

    /// <summary>
    /// Common method to load column metadata and map to UI GridColumn format
    /// Eliminates duplication across Customers, Suppliers, Orders pages
    /// </summary>
    protected async Task<List<GridColumnVM>> LoadUIColumnMetadataAsync(string entityName, Dictionary<string, List<string>>? enumMappings = null)
    {
        try
        {
            Console.WriteLine($"Loading column metadata for {entityName}...");
            
            // Use the centralized service
            var serviceColumns = await GridColumnService.LoadColumnMetadataAsync(entityName, enumMappings);
            
            // Map to UI GridColumn format (until component is updated)
            var uiColumns = serviceColumns.Select(col => new GridColumnVM
            {
                Header = col.Header,
                Field = col.Field,
                Sortable = col.Sortable,
                Filterable = col.Filterable,
                IsNumeric = col.IsNumeric,
                IsEnum = col.IsEnum,
                EnumValues = col.EnumValues
            }).ToList();
            
            Console.WriteLine($"Successfully loaded {uiColumns.Count} columns from service");
            return uiColumns;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load column metadata: {ex.Message}");
            // Service handles fallbacks, but provide empty list as final fallback
            return new List<GridColumnVM>();
        }
    }

    /// <summary>
    /// Toggle between grid and card view
    /// </summary>
    protected void ToggleView()
    {
        showGrid = !showGrid;
    }
}
