@using OrderProcessingSystem.Infrastructure.Services
@using OrderProcessingServer.Shared.UIComponents
@using Microsoft.AspNetCore.Components
@inject IGridColumnService GridColumnService
@inherits ComponentBase

@code {
    /// <summary>
    /// Common method to load column metadata and map to UI GridColumn format
    /// Eliminates duplication across Customers, Suppliers, Orders pages
    /// </summary>
    protected async Task<List<GridColumn>> LoadUIColumnMetadataAsync(string entityName, Dictionary<string, List<string>>? enumMappings = null)
    {
        try
        {
            Console.WriteLine($"Loading column metadata for {entityName}...");
            
            // Use the centralized service
            var serviceColumns = await GridColumnService.LoadColumnMetadataAsync(entityName, enumMappings);
            
            // Map to UI GridColumn format (until component is updated)
            var uiColumns = serviceColumns.Select(col => new GridColumn
            {
                Header = col.Header,
                Field = col.Field,
                Sortable = col.Sortable,
                Filterable = col.Filterable,
                IsNumeric = col.IsNumeric,
                IsEnum = col.IsEnum,
                EnumValues = col.EnumValues
            }).ToList();
            
            Console.WriteLine($"Successfully loaded {uiColumns.Count} columns from service");
            return uiColumns;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to load column metadata: {ex.Message}");
            // Service handles fallbacks, but provide empty list as final fallback
            return new List<GridColumn>();
        }
    }
}
