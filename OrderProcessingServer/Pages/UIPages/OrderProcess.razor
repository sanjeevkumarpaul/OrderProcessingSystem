@page "/orderprocess"
@page "/process-order"

@inject DataLoadingService DataService
@inject IJSRuntime JSRuntime

<PageTitle>Process Order - OrderProcessingServer</PageTitle>

<div class="order-process-page">
    <div class="text-center mb-5">
        <h1>Order Processing Initialization - Simulation Process</h1>
    </div>
    
    <!-- Order Capture Form -->
    <div class="order-capture-section mb-5">
        <div class="capture-card">
            <div class="card-header">
                <h3 class="section-title">Order Capture Application</h3>                
            </div>
                
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="loading-state">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <span class="ms-2">initializing dream sequence...</span>
                        </div>
                    }
                    else
                    {
                        <div class="flowing-text">
                            <p class="narrative-text">
                                Message for delivery related to Order Capture Application, where 
                                <span class="inline-control-wrapper">
                                    <div class="custom-dropdown tag-style-select @(isCustomerDropdownOpen ? "open" : "")" @onclick="ToggleCustomerDropdown" @onclick:stopPropagation="true">
                                        <div class="dropdown-selected">
                                            @if (selectedCustomerId == 0)
                                            {
                                                <span>Customer</span>
                                            }
                                            else
                                            {
                                                <span>@customers?.FirstOrDefault(c => c.CustomerId == selectedCustomerId)?.Name</span>
                                            }
                                        </div>
                                        @if (isCustomerDropdownOpen)
                                        {
                                            <div class="dropdown-options">
                                                <div class="dropdown-option @(selectedCustomerId == 0 ? "selected" : "")" @onclick="@(() => SelectCustomer(0))" @onclick:stopPropagation="true">
                                                    Customer
                                                </div>
                                                @if (customers != null)
                                                {
                                                    @foreach (var customer in customers)
                                                    {
                                                        <div class="dropdown-option @(selectedCustomerId == customer.CustomerId ? "selected" : "")" @onclick="@(() => SelectCustomer(customer.CustomerId))" @onclick:stopPropagation="true">
                                                            @customer.Name
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                </span>
                                has a Order no.of 
                                <span class="inline-control-wrapper">
                                    <div class="inline-quantity-group">
                                        <input type="number" 
                                               class="inline-input" 
                                               @bind="orderQuantity" 
                                               @onkeydown="HandleQuantityKeyDown"
                                               min="1" 
                                               max="5000" 
                                               placeholder="qty">
                                        <div class="micro-controls">
                                            <button type="button" class="micro-btn" @onclick="IncrementQuantity">↑</button>
                                            <button type="button" class="micro-btn" @onclick="DecrementQuantity">↓</button>
                                        </div>
                                    </div>
                                </span>
                                items from the supplier 
                                <span class="inline-control-wrapper">
                                    <div class="custom-dropdown tag-style-select @(isSupplierDropdownOpen ? "open" : "")" @onclick="ToggleSupplierDropdown" @onclick:stopPropagation="true">
                                        <div class="dropdown-selected">
                                            @if (selectedSupplierId == 0)
                                            {
                                                <span>Supplier</span>
                                            }
                                            else
                                            {
                                                <span>@suppliers?.FirstOrDefault(s => s.SupplierId == selectedSupplierId)?.Name</span>
                                            }
                                        </div>
                                        @if (isSupplierDropdownOpen)
                                        {
                                            <div class="dropdown-options">
                                                <div class="dropdown-option @(selectedSupplierId == 0 ? "selected" : "")" @onclick="@(() => SelectSupplier(0))" @onclick:stopPropagation="true">
                                                    Supplier
                                                </div>
                                                @if (suppliers != null)
                                                {
                                                    @foreach (var supplier in suppliers)
                                                    {
                                                        <div class="dropdown-option @(selectedSupplierId == supplier.SupplierId ? "selected" : "")" @onclick="@(() => SelectSupplier(supplier.SupplierId))" @onclick:stopPropagation="true">
                                                            @supplier.Name
                                                        </div>
                                                    }
                                                }
                                            </div>
                                        }
                                    </div>
                                </span>
                                .
                            </p>
                        </div>
                        
                        <!-- Action Area -->
                        <div class="action-flow mt-4">
                            <div class="process-narrative">
                                <span class="flow-text">initiate the dream sequence</span>
                                <button class="flow-btn" 
                                        @onclick="InitializeOrder" 
                                        disabled="@(!CanProcessOrder)">
                                    Initialize Order
                                </button>
                                <span class="flow-text">or</span>
                                <button class="flow-btn" @onclick="CancelOrder" disabled="@(!CanProcessOrder)">
                                    Cancel Order
                                </button>
                            </div>
                        </div>                       
                    }
                </div>
            </div>
        </div>
</div>

@code {
    // Data properties
    private List<CustomerWithOrdersVM>? customers;
    private List<SupplierWithOrdersVM>? suppliers;
    private bool isLoading = true;
  
    // Form properties
    private int selectedCustomerId = 0;
    private int selectedSupplierId = 0;
    private int orderQuantity = 1;
    
    // Custom dropdown states
    private bool isCustomerDropdownOpen = false;
    private bool isSupplierDropdownOpen = false;
    
    // Computed properties
    private bool CanProcessOrder => 
        selectedCustomerId > 0 && 
        selectedSupplierId > 0 && 
        orderQuantity >= 1 && 
        orderQuantity <= 5000;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadFormData();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setupDropdownHandlers", DotNetObjectReference.Create(this));
        }
    }
    
    private async Task LoadFormData()
    {
        isLoading = true;
                
        try
        {
            // Use optimized methods without calculations for dropdown population
            var customersTask = DataService.LoadCustomersWithOrdersAsync();
            var suppliersTask = DataService.LoadSuppliersWithOrdersAsync();
            
            await Task.WhenAll(customersTask, suppliersTask);
            
            customers = await customersTask;
            suppliers = await suppliersTask;
                      
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error loading form data:", ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }
    
    private void IncrementQuantity()
    {
        if (orderQuantity < 5000)
        {
            orderQuantity++;
        }
    }
    
    private void DecrementQuantity()
    {
        if (orderQuantity > 1)
        {
            orderQuantity--;
        }
    }
    
    private void HandleQuantityKeyDown(KeyboardEventArgs e)
    {
        // Handle arrow key navigation for quantity spinner using Code property for reliability
        // Code property provides the physical key code (e.g., "ArrowUp", "ArrowDown")
        if (e.Code == "ArrowUp")
        {
            IncrementQuantity();
        }
        else if (e.Code == "ArrowDown")
        {
            DecrementQuantity();
        }
    }
    
    private async Task InitializeOrder()
    {
        if (!CanProcessOrder) return;
        
        try
        {
            var selectedCustomer = customers?.FirstOrDefault(c => c.CustomerId == selectedCustomerId);
            var selectedSupplier = suppliers?.FirstOrDefault(s => s.SupplierId == selectedSupplierId);
            
            // Simulate order initialization
            await Task.Delay(1500);
            
            await JSRuntime.InvokeVoidAsync("console.log", "Order initialized:", new {
                CustomerId = selectedCustomerId,
                CustomerName = selectedCustomer?.Name,
                SupplierId = selectedSupplierId,
                SupplierName = selectedSupplier?.Name,
                Quantity = orderQuantity
            });
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", "Error initializing order:", ex.Message);
        }
    }
    
    private void CancelOrder()
    {
        selectedCustomerId = 0;
        selectedSupplierId = 0;
        orderQuantity = 1;        
    }
    
    // Custom dropdown methods
    private void ToggleCustomerDropdown()
    {
        isCustomerDropdownOpen = !isCustomerDropdownOpen;
        if (isCustomerDropdownOpen)
        {
            isSupplierDropdownOpen = false; // Close other dropdown
        }
    }
    
    private void ToggleSupplierDropdown()
    {
        isSupplierDropdownOpen = !isSupplierDropdownOpen;
        if (isSupplierDropdownOpen)
        {
            isCustomerDropdownOpen = false; // Close other dropdown
        }
    }
    
    private void SelectCustomer(int customerId)
    {
        selectedCustomerId = customerId;
        isCustomerDropdownOpen = false;
    }
    
    private void SelectSupplier(int supplierId)
    {
        selectedSupplierId = supplierId;
        isSupplierDropdownOpen = false;
    }
    
    [JSInvokable]
    public void CloseDropdowns()
    {
        isCustomerDropdownOpen = false;
        isSupplierDropdownOpen = false;
        InvokeAsync(StateHasChanged);
    }
}

<script>
    window.setupDropdownHandlers = function (dotNetRef) {
        // Use jQuery for cleaner, cross-browser compatible code
        $(document).ready(function() {
            
            // Click outside handler using jQuery
            $(document).on('click', function(e) {
                // Check if the clicked element is outside any dropdown using jQuery
                if (!$(e.target).closest('.custom-dropdown').length) {
                    dotNetRef.invokeMethodAsync('CloseDropdowns');
                }
            });
            
            // Keyboard handler for Escape key using jQuery
            $(document).on('keydown', function(e) {
                if (e.which === 27 || e.key === 'Escape') { // jQuery uses e.which for key codes
                    dotNetRef.invokeMethodAsync('CloseDropdowns');
                }
            });
            
        });
    };
</script>
