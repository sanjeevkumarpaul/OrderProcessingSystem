@page "/suppliers"
@using OrderProcessingServer.Shared.Dto
@using OrderProcessingServer.Shared.UIComponents
@using OrderProcessingSystem.Utilities.Extensions
@using OrderProcessingSystem.Infrastructure.Models
@using OrderProcessingSystem.Infrastructure.Interfaces
@inherits BaseGridPage
@inject IJSRuntime JS
@inject OrderProcessingSystem.Infrastructure.Services.IGridColumnService GridColumnService
@inject IHttpClientFactory HttpFactory
<link rel="stylesheet" href="~/css/suppliers.css" />
<h1 class="page-title d-flex justify-content-between align-items-center">
  <span class="title-text">Suppliers</span>
  <div class="header-controls">
    <button class="btn btn-sm btn-primary" @onclick="ToggleGrid">@((showGrid) ? "Show Cards" : "All Suppliers")</button>
  </div>
</h1>

@if (suppliers == null)
{
  <p><em>Loading...</em></p>
}

@if (showGrid)
{
  <GenericGrid TItem="SupplierDto" Items="suppliers" Columns="supplierColumns" PageSize="gridPageSize"  />
}
else
{
  <div class="row g-3">
    @foreach (var s in GetPagedCardSuppliers())
    {
      <div class="col-12 col-sm-6 col-md-4 col-xl-3 mb-3">
        <div class="card p-3" style="max-width:100%; word-break:break-word;">
          <h5 class="text-truncate">@s.Name</h5>
          <p class="small text-muted">Country: @s.Country</p>
          <p class="small">Orders Supplied: <strong>@s.OrdersSupplied</strong></p>
        </div>
      </div>
    }
  </div>

  <div class="d-flex justify-content-between mt-2 align-items-center">
    <div>
      <button class="btn btn-secondary me-2" @onclick="PrevSuppliers" disabled="@(supplierPageIndex==0)">Previous</button>
      <button class="btn btn-secondary" @onclick="NextSuppliers" disabled="@(supplierPageIndex+1>=supplierTotalPages)">Next</button>
    </div>
    <div>
      <small>Page @(supplierPageIndex+1) of @supplierTotalPages</small>
    </div>
  </div>
}

@code {
  List<SupplierDto>? suppliers = null;

  // Cards paging
  int supplierPageIndex = 0;
  int supplierPageSize = 12;
  int supplierTotalPages = 1;

  // Grid mode and paging
  bool showGrid = false;
  List<SupplierDto>? pagedGridSuppliers = null;
  int gridCurrentPage = 1;
  int gridPageSize = 10;
  int gridTotalPages = 1;
  int[] gridPageSizes = new[] { 5, 10, 15 };

  // grid columns - keeping UI GridColumn for component compatibility
  List<OrderProcessingServer.Shared.UIComponents.GridColumn> supplierColumns = new List<OrderProcessingServer.Shared.UIComponents.GridColumn>();

  private bool _loaded;
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender || _loaded) return;
    _loaded = true;

    try
    {
      var client = HttpFactory.CreateClient("ApiClient");
      suppliers = await client.GetFromJsonAsync<List<SupplierDto>>("api/data/suppliers") ?? new List<SupplierDto>();
      var orders = await client.GetFromJsonAsync<List<OrderDto>>("api/data/orders") ?? new List<OrderDto>();

      // compute OrdersSupplied per supplier
      var groups = orders
        .Where(o => o.SupplierId.HasValue)
        .GroupBy(o => o.SupplierId!.Value)
        .ToDictionary(g => g.Key, g => g.Count());
      foreach (var s in suppliers)
      {
        if (groups.TryGetValue(s.SupplierId, out var count))
        {
          s.OrdersSupplied = count;
        }
      }

      await LoadColumnMetadata();
      SetupCardsPaging();
      SetupGridPaging();
      await InvokeAsync(StateHasChanged);
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error loading suppliers: {ex.Message}");
      await LoadColumnMetadata();
      suppliers = new List<SupplierDto>();
      SetupCardsPaging();
      SetupGridPaging();
      await InvokeAsync(StateHasChanged);
    }
  }

  void NextSuppliers()
  {
    if (suppliers == null) return;
    if (supplierPageIndex + 1 >= supplierTotalPages) return;
    supplierPageIndex++;
  }

  void PrevSuppliers()
  {
    if (suppliers == null) return;
    if (supplierPageIndex <= 0) return;
    supplierPageIndex--;
  }

  void SetupCardsPaging()
  {
    supplierPageIndex = 0;
    var total = (suppliers ?? Enumerable.Empty<SupplierDto>()).Count();
    supplierTotalPages = Math.Max(1, (int)Math.Ceiling((double)total / supplierPageSize));
  }

  IEnumerable<SupplierDto> GetPagedCardSuppliers()
  {
    if (suppliers == null) return Enumerable.Empty<SupplierDto>();
    return suppliers.Skip(supplierPageIndex * supplierPageSize).Take(supplierPageSize);
  }

  void SetupGridPaging()
  {
    gridCurrentPage = 1;
    gridTotalPages = Math.Max(1, (int)Math.Ceiling((double)(suppliers?.Count ?? 0) / gridPageSize));
    ApplyGridPage();
  }

  void ApplyGridPage()
  {
    if (suppliers == null) { pagedGridSuppliers = new List<SupplierDto>(); return; }
    var list = suppliers.ToList();
    gridTotalPages = Math.Max(1, (int)Math.Ceiling((double)list.Count / gridPageSize));
    if (gridCurrentPage < 1) gridCurrentPage = 1;
    if (gridCurrentPage > gridTotalPages) gridCurrentPage = gridTotalPages;
    pagedGridSuppliers = list.Skip((gridCurrentPage - 1) * gridPageSize).Take(gridPageSize).ToList();
  }

  void GoToGridPage(int page)
  {
    if (suppliers == null) return;
    gridCurrentPage = Math.Clamp(page, 1, gridTotalPages);
    ApplyGridPage();
  }

  async Task ExportFilteredSuppliersAsync()
  {
    if (suppliers == null || suppliers.Count == 0) return;
    var list = suppliers.ToList();
    var csv = BuildCsv(list);
    var filename = $"suppliers_filtered_{DateTime.UtcNow:yyyyMMddHHmmss}.csv";
    await JS.InvokeVoidAsync("blazorDownload", filename, csv);
  }

  async Task ExportAllSuppliersAsync()
  {
    if (suppliers == null || suppliers.Count == 0) return;
    var csv = BuildCsv(suppliers);
    var filename = $"suppliers_all_{DateTime.UtcNow:yyyyMMddHHmmss}.csv";
    await JS.InvokeVoidAsync("blazorDownload", filename, csv);
  }

  string BuildCsv(List<SupplierDto> list)
  {
    var sb = new System.Text.StringBuilder();
    sb.AppendLine("SupplierId,Name,Country,OrdersSupplied");
    foreach (var s in list)
    {
      var name = EscapeCsv(s.Name ?? string.Empty);
      var country = EscapeCsv(s.Country ?? string.Empty);
      sb.AppendLine($"{s.SupplierId},{name},{country},{s.OrdersSupplied}");
    }
    return sb.ToString();
  }

  static string EscapeCsv(string input)
  {
    if (input == null) return string.Empty;
    if (input.Contains(",") || input.Contains("\"") || input.Contains('\n'))
    {
      return "\"" + input.Replace("\"", "\"\"") + "\"";
    }
    return input;
  }

  void ToggleGrid()
  {
    showGrid = !showGrid;
    if (showGrid) SetupGridPaging(); else SetupCardsPaging();
  }

  async Task LoadColumnMetadata()
  {
    supplierColumns = await LoadUIColumnMetadataAsync("suppliers");
  }
}
