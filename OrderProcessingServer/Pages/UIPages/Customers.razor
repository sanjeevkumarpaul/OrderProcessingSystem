@page "/customers"
@using OrderProcessingServer.Shared.Dto
@using OrderProcessingServer.Shared.UIComponents
@using OrderProcessingServer.Services
@using OrderProcessingSystem.Utilities.Extensions
@using OrderProcessingSystem.Infrastructure.Models
@using OrderProcessingSystem.Infrastructure.Interfaces
@inherits BaseGridPage
@inject IJSRuntime JS
@inject OrderProcessingSystem.Infrastructure.Services.IGridColumnService GridColumnService
@inject DataLoadingService DataService
<link rel="stylesheet" href="~/css/customers.css" />
<h1 class="page-title d-flex justify-content-between align-items-center">
  <span class="title-text">Customers</span>
  <div class="header-controls">
    <button class="btn btn-sm btn-primary" @onclick="ToggleGrid">@((showGrid) ? "Show Cards" : "All Customers")</button>
  </div>
</h1>

@if (customers == null)
{
  <p><em>Loading...</em></p>
}

@if (showGrid)
{
  <GenericGrid TItem="CustomerDto" Items="customers" Columns="customerColumns" PageSize="10"  />
}
else
{
  <div class="row g-3">
    @foreach (var c in GetPagedCardCustomers())
    {
      <div class="col-12 col-sm-6 col-md-4 col-xl-3 mb-3">
        <div class="card p-3" style="max-width:100%; word-break:break-word;">
          <h5 class="text-truncate">@c.Name</h5>
          <p class="small text-muted">Orders: @c.OrdersCount</p>
          <p class="small">Sales Total: <strong>@c.TotalSales.ToTwoDecimals(true)</strong></p>
        </div>
      </div>
    }
  </div>

  <div class="d-flex justify-content-between mt-2 align-items-center">
    <div>
      <button class="btn btn-secondary me-2" @onclick="PrevCustomers" disabled="@(customerPageIndex==0)">Previous</button>
      <button class="btn btn-secondary" @onclick="NextCustomers" disabled="@(customerPageIndex+1>=customerTotalPages)">Next</button>
    </div>
    <div>
      <small>Page @(customerPageIndex+1) of @customerTotalPages</small>
    </div>
  </div>
}

@code {
  List<CustomerDto>? customers = null;

  // Cards paging
  int customerPageIndex = 0;
  int customerPageSize = 12;
  int customerTotalPages = 1;

  // Grid mode and paging
  bool showGrid = false;
  List<CustomerDto>? pagedGridCustomers = null;
  

  // grid columns - keeping UI GridColumn for component compatibility
  List<OrderProcessingServer.Shared.UIComponents.GridColumn> customerColumns = new List<OrderProcessingServer.Shared.UIComponents.GridColumn>();

  private bool _loaded;
  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (!firstRender || _loaded) return;
    _loaded = true;

    try
    {
      // Use the centralized data loading service
      customers = await DataService.LoadCustomersWithCalculationsAsync();
    }
    catch (Exception ex)
    {
      Console.WriteLine($"Error loading customers: {ex.Message}");      
    }
    finally
    {
      customerColumns = await LoadUIColumnMetadataAsync("customers");
      customers = customers.Any() ? customers : new List<CustomerDto>();
      SetupCardsPaging();      
      await InvokeAsync(StateHasChanged);
    }
  }

  void NextCustomers()
  {
    if (customers == null) return;
    if (customerPageIndex + 1 >= customerTotalPages) return;
    customerPageIndex++;
  }

  void PrevCustomers()
  {
    if (customers == null) return;
    if (customerPageIndex <= 0) return;
    customerPageIndex--;
  }

  void SetupCardsPaging()
  {
    customerPageIndex = 0;
    var total = (customers ?? Enumerable.Empty<CustomerDto>()).Count();
    customerTotalPages = Math.Max(1, (int)Math.Ceiling((double)total / customerPageSize));
  }

  IEnumerable<CustomerDto> GetPagedCardCustomers()
  {
    if (customers == null) return Enumerable.Empty<CustomerDto>();
    return customers.Skip(customerPageIndex * customerPageSize).Take(customerPageSize);
  }
  void ToggleGrid()
  {
    showGrid = !showGrid;
    if (!showGrid) SetupCardsPaging();
  }

}
