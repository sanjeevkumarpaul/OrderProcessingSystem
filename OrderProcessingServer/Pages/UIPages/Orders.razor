@page "/orders"
@using OrderProcessingServer.Shared.Dto
@using OrderProcessingSystem.Utilities.Extensions
@inherits BaseDataPage<OrderDto>

<BaseDataPage TItem="OrderDto" 
              PageTitle="Orders"
              EntityName="orders"
              ShowCardsText="Show Cards"
              ShowGridText="Show Grid"
              GridPageSize="10"
              CardPageSize="12"
              CardColumnClass="col-12 col-sm-6 col-md-4 col-xl-3 mb-3"
              DataLoader="@LoadOrdersAsync">
    <CardTemplate Context="order">
        <div class="card p-3" style="max-width:100%; word-break:break-word;">
            <h5 class="text-truncate">Order #@order.OrderId</h5>
            <p class="small">Total: <strong>@order.Total.ToTwoDecimals(true)</strong></p>
            @if (order.Customer != null)
            {
                <p class="small">Customer: @order.Customer.Name</p>
            }
            @if (!string.IsNullOrEmpty(order.Status))
            {
                <span class="badge @GetStatusBadgeClass(order.Status)">@order.Status</span>
            }
        </div>
    </CardTemplate>
</BaseDataPage>

@code {
    // Data loader function for orders
    private async Task<List<OrderDto>?> LoadOrdersAsync()
    {
        return await DataLoadingService.LoadOrdersAsync();
    }

    // Helper method for status badge styling
    private string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "pending" => "badge-warning",
            "processing" => "badge-info",
            "shipped" => "badge-primary",
            "delivered" => "badge-success",
            "cancelled" => "badge-danger",
            _ => "badge-secondary"
        };
    }
}
