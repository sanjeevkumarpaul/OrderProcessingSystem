@page "/orders"
@inherits BaseGridPage
@inject IHttpClientFactory HttpFactory
@inject IJSRuntime JS
@inject OrderProcessingSystem.Infrastructure.Services.IGridColumnService GridColumnService
@using OrderProcessingSystem.Infrastructure.Models

<h1 class="page-title">Orders</h1>

@if (orders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <GenericGrid TItem="OrderDto" Items="orders" Columns="orderColumns" PageSize="10" />
}

@using OrderProcessingServer.Shared.Dto
@using OrderProcessingServer.Shared.UIComponents
@using OrderProcessingSystem.Core.Enums

@code {
    // grid columns for orders (initialized after statusValues available)
    List<OrderProcessingServer.Shared.UIComponents.GridColumn> orderColumns = new List<OrderProcessingServer.Shared.UIComponents.GridColumn>();

    List<OrderDto>? orders = null;
   
    protected override Task OnInitializedAsync()
    {
        // moved to OnAfterRenderAsync to avoid prerender-time network calls
        return Task.CompletedTask;
    }

    private bool _loaded;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || _loaded) return;
        _loaded = true;

        try
        {
            var client = HttpFactory.CreateClient("ApiClient");
            orders = await client.GetFromJsonAsync<List<OrderDto>>("api/data/orders") ?? new List<OrderDto>();
            Console.WriteLine($"Fetched {orders.Count} orders.");
            // Load column metadata from API
            await LoadColumnMetadata();
            
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Orders fetch failed: {ex}");
            orders = new List<OrderDto>();                    
        }
        finally
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    async Task LoadColumnMetadata()
    {
        // Orders page needs enum mappings for Status field
        var enumMappings = new Dictionary<string, List<string>>
        {
            { "Status", Enum.GetNames(typeof(OrderStatus)).ToList() }
        };
        
        orderColumns = await LoadUIColumnMetadataAsync("orders", enumMappings);
    }
}
